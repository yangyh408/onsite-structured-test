# This Python file uses the following encoding: utf-8
#############################################################################
##
## Copyright (C) 2020 The Qt Company Ltd.
## Contact: https://www.qt.io/licensing/
##
## This file is part of Qt for Python.
##
## $QT_BEGIN_LICENSE:LGPL$
## Commercial License Usage
## Licensees holding valid commercial Qt licenses may use this file in
## accordance with the commercial license agreement provided with the
## Software or, alternatively, in accordance with the terms contained in
## a written agreement between you and The Qt Company. For licensing terms
## and conditions see https://www.qt.io/terms-conditions. For further
## information use the contact form at https://www.qt.io/contact-us.
##
## GNU Lesser General Public License Usage
## Alternatively, this file may be used under the terms of the GNU Lesser
## General Public License version 3 as published by the Free Software
## Foundation and appearing in the file LICENSE.LGPL3 included in the
## packaging of this file. Please review the following information to
## ensure the GNU Lesser General Public License version 3 requirements
## will be met: https://www.gnu.org/licenses/lgpl-3.0.html.
##
## GNU General Public License Usage
## Alternatively, this file may be used under the terms of the GNU
## General Public License version 2.0 or (at your option) the GNU General
## Public license version 3 or any later version approved by the KDE Free
## Qt Foundation. The licenses are as published by the Free Software
## Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3
## included in the packaging of this file. Please review the following
## information to ensure the GNU General Public License requirements will
## be met: https://www.gnu.org/licenses/gpl-2.0.html and
## https://www.gnu.org/licenses/gpl-3.0.html.
##
## $QT_END_LICENSE$
##
#############################################################################


import PySide2
try:
    import typing
except ImportError:
    from PySide2.support.signature import typing

class Object(object): pass

import shiboken2 as Shiboken
Shiboken.Object = Object

import PySide2.QtCore
import PySide2.QtGui
import PySide2.QtWidgets


class CustomerNet(Shiboken.Object):

    def __init__(self) -> None: ...

    def afterLoadNet(self) -> None: ...
    def afterViewKeyReleaseEvent(self, event:PySide2.QtGui.QKeyEvent) -> None: ...
    def afterViewMouseDoubleClickEvent(self, event:PySide2.QtGui.QMouseEvent) -> None: ...
    def afterViewMouseMoveEvent(self, event:PySide2.QtGui.QMouseEvent) -> None: ...
    def afterViewMousePressEvent(self, event:PySide2.QtGui.QMouseEvent) -> None: ...
    def afterViewMouseReleaseEvent(self, event:PySide2.QtGui.QMouseEvent) -> None: ...
    def afterViewResizeEvent(self, event:PySide2.QtGui.QResizeEvent) -> None: ...
    def afterViewScrollContentsBy(self, dx:int, dy:int) -> None: ...
    def afterViewWheelEvent(self, event:PySide2.QtGui.QWheelEvent) -> None: ...
    def beforeLoadNet(self) -> None: ...
    def connectorAreaBrushColor(self, connAreaId:int, color:PySide2.QtGui.QColor) -> bool: ...
    def curvatureMinDist(self, itemType:int, itemId:int, minDist:float) -> bool: ...
    def curvaturePrecision(self, itemType:int, itemId:int, extend1:float, extend2:float, precision:float) -> bool: ...
    def customerTableDDL(self) -> typing.Dict: ...
    def deleteCustomerData(self) -> None: ...
    def insertCustomerData(self) -> None: ...
    def isDrawLaneCenterLine(self, laneId:int) -> bool: ...
    def isDrawLinkCenterLine(self, linkId:int) -> bool: ...
    def isDrawLinkCorner(self, linkId:int) -> bool: ...
    def isPermitForCustDraw(self) -> bool: ...
    def labelNameAndFont(self, itemType:int, itemId:int, outPropName:int, outFontSize:float) -> None: ...
    def laneBrushAndPen(self, laneId:int, brush:PySide2.QtGui.QBrush, pen:PySide2.QtGui.QPen) -> bool: ...
    def laneType(self, lType:typing.Sequence) -> bool: ...
    def linkBrushColor(self, linkId:int, color:PySide2.QtGui.QColor) -> bool: ...
    def linkBuildGLanes(self, pILink:Tessng.ILink) -> bool: ...
    def linkType(self, lType:typing.Sequence) -> bool: ...
    def netFileSuffix(self, suffix:str) -> bool: ...
    def paint(self, itemType:int, itemId:int, painter:PySide2.QtGui.QPainter) -> bool: ...


class CustomerSimulator(Shiboken.Object):

    def __init__(self) -> None: ...

    def afterCalcTracingType(self, pIVehicle:Tessng.IVehicle) -> None: ...
    def afterOneStep(self) -> None: ...
    def afterStart(self) -> None: ...
    def afterStep(self, pIVehicle:Tessng.IVehicle) -> None: ...
    def afterStop(self) -> None: ...
    def afterStopVehicle(self, pIVehicle:Tessng.IVehicle) -> None: ...
    def beforeCalcLampColor(self, keepOn:bool) -> bool: ...
    def beforeCreateGVehiclesForBusLine(self, pBusLine:Tessng.IBusLine, keepOn:bool) -> None: ...
    def beforeMergingToLane(self, pIVehicle:Tessng.IVehicle, keepOn:bool) -> None: ...
    def beforeNextPoint(self, pIVehicle:Tessng.IVehicle, keepOn:bool) -> None: ...
    def beforeNextRoad(self, pIVehicle:Tessng.IVehicle, pRoad:PySide2.QtWidgets.QGraphicsItem, keepOn:bool) -> None: ...
    def beforeStart(self, keepOn:bool) -> None: ...
    def beforeStopVehicle(self, pIVehicle:Tessng.IVehicle) -> None: ...
    def beforeToLeftFreely(self, pIVehicle:Tessng.IVehicle, bKeepOn:bool) -> None: ...
    def beforeToRightFreely(self, pIVehicle:Tessng.IVehicle, bKeepOn:bool) -> None: ...
    def boundingRect(self, pIVehicle:Tessng.IVehicle, outRect:PySide2.QtCore.QRectF) -> bool: ...
    def busArriving(self, pIVehicle:Tessng.IVehicle, pStationLine:Tessng.IBusStationLine, alightingCount:int, alightingTime:int, boardingCount:int, boardingTime:int) -> None: ...
    def calcAcce(self, pIVehicle:Tessng.IVehicle, acce:float) -> bool: ...
    def calcChangeLaneSafeDist(self, pIVehicle:Tessng.IVehicle, dist:float) -> bool: ...
    def calcDistToEventObj(self, pIVehicle:Tessng.IVehicle, dist:float) -> bool: ...
    def calcDynaDispatchParameters(self) -> typing.List: ...
    def calcDynaFlowRatioParameters(self) -> typing.List: ...
    def calcDynaSignalContralParameters(self) -> typing.List: ...
    def calcLampColor(self, pSignalLamp:Tessng.ISignalLamp) -> bool: ...
    def calcLimitedLaneNumber(self, pIVehicle:Tessng.IVehicle) -> typing.List: ...
    def calcMaxLimitedSpeed(self, pIVehicle:Tessng.IVehicle, inOutLimitedSpeed:float) -> bool: ...
    def calcSimuConfig(self, config:Tessng.Online.SimuConfig) -> bool: ...
    def calcSpeedLimitByLane(self, pILink:Tessng.ILink, laneNumber:int, outSpeed:float) -> bool: ...
    def calcVehicleEuler(self, pIVehicle:Tessng.IVehicle, bPosiDire:bool=...) -> PySide2.QtGui.QVector3D: ...
    def candidateLaneConnector(self, pIVehicle:Tessng.IVehicle, pCurrLaneConnector:Tessng.ILaneConnector) -> Tessng.ILaneConnector: ...
    def candidateLaneConnectors(self, pIVehicle:Tessng.IVehicle, lInLC:typing.Sequence) -> typing.List: ...
    def duringOneStep(self) -> None: ...
    def exportVehiTrace(self, dirPath:str) -> None: ...
    def initVehicle(self, pIVehicle:Tessng.IVehicle) -> None: ...
    def isCalcDistToReduceArea(self) -> bool: ...
    def isCalcVehicleVector3D(self) -> bool: ...
    def isExportCollecterInfo(self) -> bool: ...
    def isPassbyEventZone(self, pIVehicle:Tessng.IVehicle) -> bool: ...
    def isStopDriving(self, pIVehicle:Tessng.IVehicle) -> bool: ...
    def leaveOffChangingTrace(self, pIVehicle:Tessng.IVehicle, differ:float, s:float) -> bool: ...
    def nextPoint(self, pIVehicle:Tessng.IVehicle, bResult:bool) -> bool: ...
    def paintVehicle(self, pIVehicle:Tessng.IVehicle, painter:PySide2.QtGui.QPainter) -> bool: ...
    def paintVehicleWithRotation(self, pIVehicle:Tessng.IVehicle, painter:PySide2.QtGui.QPainter, inOutRotation:float) -> bool: ...
    def reCalcAngle(self, pIVehicle:Tessng.IVehicle, outAngle:float) -> bool: ...
    def reCalcDismissChangeLane(self, pIVehicle:Tessng.IVehicle) -> bool: ...
    def reCalcToLeftFreely(self, pIVehicle:Tessng.IVehicle) -> bool: ...
    def reCalcToLeftLane(self, pIVehicle:Tessng.IVehicle) -> bool: ...
    def reCalcToRightFreely(self, pIVehicle:Tessng.IVehicle) -> bool: ...
    def reCalcToRightLane(self, pIVehicle:Tessng.IVehicle) -> bool: ...
    def reCalcdesirSpeed(self, pIVehicle:Tessng.IVehicle, inOutDesirSpeed:float) -> bool: ...
    def rePaintVehicle(self, pIVehicle:Tessng.IVehicle, painter:PySide2.QtGui.QPainter) -> None: ...
    def reSetAcce(self, pIVehicle:Tessng.IVehicle, inOutAcce:float) -> bool: ...
    def reSetDistanceFront(self, pIVehicle:Tessng.IVehicle, distance:float, s0:float) -> bool: ...
    def reSetFollowingParam(self, pIVehicle:Tessng.IVehicle, inOutSafeInterval:float, inOutSafeDistance:float) -> bool: ...
    def reSetFollowingParams(self) -> typing.List: ...
    def reSetFollowingType(self, pIVehicle:Tessng.IVehicle, outTypeValue:int) -> bool: ...
    def reSetSimuResultDir(self, inOutResultDir:str) -> bool: ...
    def reSetSpeed(self, pIVehicle:Tessng.IVehicle, inOutSpeed:float) -> bool: ...
    def reSetVehicleFront(self, pIVehicle:Tessng.IVehicle, pVehiFront:Tessng.IVehicle) -> bool: ...
    def recentTimeOfSpeedAndPos(self, timeInterval:int) -> bool: ...
    def recoveredSnapshot(self) -> bool: ...
    def shape(self, pIVehicle:Tessng.IVehicle, outShape:PySide2.QtGui.QPainterPath) -> bool: ...
    def travelOnChangingTrace(self, pIVehicle:Tessng.IVehicle) -> bool: ...
    def vehiRunInfo(self, pIVehicle:Tessng.IVehicle) -> str: ...
    def writeSimuResult(self, dataDir:str) -> None: ...


class GraphicsItemPropName(object):
    Id: Tessng.GraphicsItemPropName # value = Tessng.GraphicsItemPropName.Id
    Name: Tessng.GraphicsItemPropName # value = Tessng.GraphicsItemPropName.Name
    None_: Tessng.GraphicsItemPropName # value = Tessng.GraphicsItemPropName.None_
    name: getset_descriptor # value = <attribute 'name' of 'Tessng.GraphicsItemPropName' objects>
    values: dict # value = {'None_': Tessng.GraphicsItemPropName.None_, 'Id': Tessng.GraphicsItemPropName.Id, 'Name': Tessng.GraphicsItemPropName.Name}


class GuiInterface(Shiboken.Object):

    def __init__(self) -> None: ...

    def aboutMenu(self) -> PySide2.QtWidgets.QMenu: ...
    def actionBusLine(self) -> PySide2.QtWidgets.QAction: ...
    def actionBusStation(self) -> PySide2.QtWidgets.QAction: ...
    def actionCalcDistance(self) -> PySide2.QtWidgets.QAction: ...
    def actionChangeLaneParam(self) -> PySide2.QtWidgets.QAction: ...
    def actionClose(self) -> PySide2.QtWidgets.QAction: ...
    def actionCloseAll(self) -> PySide2.QtWidgets.QAction: ...
    def actionDispConfig(self) -> PySide2.QtWidgets.QAction: ...
    def actionDrivInfoCollecter(self) -> PySide2.QtWidgets.QAction: ...
    def actionEvalPubtrans(self) -> PySide2.QtWidgets.QAction: ...
    def actionExit(self) -> PySide2.QtWidgets.QAction: ...
    def actionNewFile(self) -> PySide2.QtWidgets.QAction: ...
    def actionNullGMapTool(self) -> PySide2.QtWidgets.QAction: ...
    def actionOpenFile(self) -> PySide2.QtWidgets.QAction: ...
    def actionPan(self) -> PySide2.QtWidgets.QAction: ...
    def actionPause(self) -> PySide2.QtWidgets.QAction: ...
    def actionPluginManager(self) -> PySide2.QtWidgets.QAction: ...
    def actionQueueCounter(self) -> PySide2.QtWidgets.QAction: ...
    def actionRun(self) -> PySide2.QtWidgets.QAction: ...
    def actionSave(self) -> PySide2.QtWidgets.QAction: ...
    def actionSaveOther(self) -> PySide2.QtWidgets.QAction: ...
    def actionSelectAllGBusLine(self) -> PySide2.QtWidgets.QAction: ...
    def actionSelectAllGBusStation(self) -> PySide2.QtWidgets.QAction: ...
    def actionSelectAllGConnector(self) -> PySide2.QtWidgets.QAction: ...
    def actionSelectAllGDeciPoint(self) -> PySide2.QtWidgets.QAction: ...
    def actionSelectAllGLink(self) -> PySide2.QtWidgets.QAction: ...
    def actionSelectRectangle(self) -> PySide2.QtWidgets.QAction: ...
    def actionSignalGroup(self) -> PySide2.QtWidgets.QAction: ...
    def actionSignalLamp(self) -> PySide2.QtWidgets.QAction: ...
    def actionSimuConfig(self) -> PySide2.QtWidgets.QAction: ...
    def actionStop(self) -> PySide2.QtWidgets.QAction: ...
    def actionTracingParam(self) -> PySide2.QtWidgets.QAction: ...
    def actionTravelDetector(self) -> PySide2.QtWidgets.QAction: ...
    def actionTriggered(self) -> PySide2.QtWidgets.QAction: ...
    def actionVehicleComposition(self) -> PySide2.QtWidgets.QAction: ...
    def actionVehicleType(self) -> PySide2.QtWidgets.QAction: ...
    def actionZoomFullExtent(self) -> PySide2.QtWidgets.QAction: ...
    def actionZoomIn(self) -> PySide2.QtWidgets.QAction: ...
    def actionZoomOut(self) -> PySide2.QtWidgets.QAction: ...
    def addDockWidgetToMainWindow(self, area:PySide2.QtCore.Qt.DockWidgetArea, dockwidget:PySide2.QtWidgets.QDockWidget) -> None: ...
    def addToolBar(self, name:str) -> PySide2.QtWidgets.QToolBar: ...
    def addWidgetToToolBar(self, pWidget:PySide2.QtWidgets.QWidget) -> PySide2.QtWidgets.QAction: ...
    def certificatePlugin(self, pluginName:str) -> bool: ...
    @typing.overload
    def checkToolButtons(self, checked:bool, pException:PySide2.QtWidgets.QAction) -> None: ...
    def drawGrid(self) -> None: ...
    def editorMenu(self) -> PySide2.QtWidgets.QMenu: ...
    def fileMenu(self) -> PySide2.QtWidgets.QMenu: ...
    def fileToolBar(self) -> PySide2.QtWidgets.QToolBar: ...
    def loadPlugins(self) -> None: ...
    def mainWindow(self) -> PySide2.QtWidgets.QMainWindow: ...
    def menuBar(self) -> PySide2.QtWidgets.QMenuBar: ...
    def netMenu(self) -> PySide2.QtWidgets.QMenu: ...
    def netToolBar(self) -> PySide2.QtWidgets.QToolBar: ...
    def operToolBar(self) -> PySide2.QtWidgets.QToolBar: ...
    def releasePlugins(self) -> None: ...
    def removeDockWidgetFromMainWindow(self, dockwidget:PySide2.QtWidgets.QDockWidget) -> None: ...
    def setActionTriggered(self, pAction:PySide2.QtWidgets.QAction) -> None: ...
    def simuMenu(self) -> PySide2.QtWidgets.QMenu: ...
    def simuToolBar(self) -> PySide2.QtWidgets.QToolBar: ...
    def statusBar(self) -> PySide2.QtWidgets.QStatusBar: ...
    def systemToolBar(self) -> PySide2.QtWidgets.QToolBar: ...
    def viewMenu(self) -> PySide2.QtWidgets.QMenu: ...
    def winHeight(self) -> float: ...
    def winWidth(self) -> float: ...
    def winX(self) -> float: ...
    def winY(self) -> float: ...


class IAccidentZone(Shiboken.Object):

    def __init__(self) -> None: ...

    def duration(self) -> int: ...
    def id(self) -> int: ...
    def laneObjects(self) -> typing.List: ...
    def level(self) -> int: ...
    def location(self) -> float: ...
    def name(self) -> str: ...
    def needRescue(self) -> int: ...
    def rescueTime(self) -> int: ...
    def roadId(self) -> int: ...
    def roadType(self) -> str: ...
    def section(self) -> Tessng.ISection: ...
    def waitTimeBeforeRescue(self) -> int: ...
    def zoneLength(self) -> float: ...


class IBusLine(Shiboken.Object):

    def __init__(self) -> None: ...

    def desirSpeed(self) -> float: ...
    def dispatchEndTime(self) -> int: ...
    def dispatchFreq(self) -> int: ...
    def dispatchStartTime(self) -> int: ...
    def id(self) -> int: ...
    def length(self) -> float: ...
    def links(self) -> typing.List: ...
    def name(self) -> str: ...
    def passCountAtStartTime(self) -> int: ...
    def setDesirSpeed(self, desirSpeed:float) -> None: ...
    def setDispatchEndTime(self, endTime:int) -> None: ...
    def setDispatchFreq(self, freq:int) -> None: ...
    def setDispatchStartTime(self, startTime:int) -> None: ...
    def setName(self, name:str) -> None: ...
    def setPassCountAtStartTime(self, count:int) -> None: ...
    def stationLines(self) -> typing.List: ...
    def stations(self) -> typing.List: ...


class IBusStation(Shiboken.Object):

    def __init__(self) -> None: ...

    def distance(self) -> float: ...
    def id(self) -> int: ...
    def lane(self) -> Tessng.ILane: ...
    def laneNumber(self) -> int: ...
    def length(self) -> float: ...
    def link(self) -> Tessng.ILink: ...
    def name(self) -> str: ...
    def polygon(self) -> PySide2.QtGui.QPolygonF: ...
    def setDistToStart(self, dist:float) -> None: ...
    def setLength(self, length:float) -> None: ...
    def setName(self, name:str) -> None: ...
    def setType(self, type:int) -> None: ...
    def stationType(self) -> int: ...
    def x(self) -> float: ...
    def y(self) -> float: ...


class IBusStationLine(Shiboken.Object):

    def __init__(self) -> None: ...

    def busParkingTime(self) -> int: ...
    def getOnTimePerPerson(self) -> float: ...
    def getOutPercent(self) -> float: ...
    def getOutTimePerPerson(self) -> float: ...
    def id(self) -> int: ...
    def lineId(self) -> int: ...
    def setBusParkingTime(self, time:int) -> None: ...
    def setGetOnTimePerPerson(self, time:float) -> None: ...
    def setGetOutPercent(self, percent:float) -> None: ...
    def setGetOutTimePerPerson(self, time:float) -> None: ...
    def stationId(self) -> int: ...


class IConnector(Tessng.ISection):

    def __init__(self) -> None: ...

    def castToConnector(self) -> Tessng.IConnector: ...
    def castToLink(self) -> Tessng.ILink: ...
    def fromLink(self) -> Tessng.ILink: ...
    def fromSection(self, id:int=...) -> Tessng.ISection: ...
    def gtype(self) -> int: ...
    def id(self) -> int: ...
    def laneConnectors(self) -> typing.List: ...
    def laneObjects(self) -> typing.List: ...
    def length(self) -> float: ...
    def limitSpeed(self) -> float: ...
    def minSpeed(self) -> float: ...
    def name(self) -> str: ...
    def polygon(self) -> PySide2.QtGui.QPolygonF: ...
    def setLaneConnectorOtherAtrrs(self, lAttrs:typing.Sequence) -> None: ...
    def setName(self, name:str) -> None: ...
    def setOtherAttr(self, otherAttr:typing.Dict) -> None: ...
    def toLink(self) -> Tessng.ILink: ...
    def toSection(self, id:int=...) -> Tessng.ISection: ...
    def v3z(self) -> float: ...
    def z(self) -> float: ...


class IConnectorArea(Shiboken.Object):

    def __init__(self) -> None: ...

    def allConnector(self) -> typing.List: ...
    def centerPoint(self) -> PySide2.QtCore.QPointF: ...
    def id(self) -> int: ...
    def setWorkerKey(self, key:int) -> None: ...
    def workerKey(self) -> int: ...


class IDecisionPoint(Shiboken.Object):

    def __init__(self) -> None: ...

    def distance(self) -> float: ...
    def id(self) -> int: ...
    def link(self) -> Tessng.ILink: ...
    def name(self) -> str: ...
    def polygon(self) -> PySide2.QtGui.QPolygonF: ...
    def routings(self) -> typing.List: ...
    def setDynaModified(self, bModified:bool) -> None: ...


class IDispatchPoint(Shiboken.Object):

    def __init__(self) -> None: ...

    def addDispatchInterval(self, vehiCompId:int, interval:int, vehiCount:int) -> int: ...
    def id(self) -> int: ...
    def link(self) -> Tessng.ILink: ...
    def name(self) -> str: ...
    def polygon(self) -> PySide2.QtGui.QPolygonF: ...
    def setDynaModified(self, bModified:bool) -> None: ...


class ILane(Tessng.ILaneObject):

    def __init__(self) -> None: ...

    def actionType(self) -> str: ...
    def centerBreakPoint3Ds(self) -> typing.List: ...
    def centerBreakPoints(self) -> typing.List: ...
    def distToStartPoint(self, p:PySide2.QtCore.QPointF) -> float: ...
    def distToStartPointWithSegmIndex(self, p:PySide2.QtCore.QPointF, segmIndex:int=..., bOnCentLine:bool=...) -> float: ...
    def fromLaneObject(self, id:int=...) -> Tessng.ILaneObject: ...
    def getPointAndIndexByDist(self, dist:float, outPoint:PySide2.QtCore.QPointF, outIndex:int) -> bool: ...
    def getPointByDist(self, dist:float, outPoint:PySide2.QtCore.QPointF) -> bool: ...
    def gtype(self) -> int: ...
    def id(self) -> int: ...
    def leftBreak3DsPartly(self, fromPoint:PySide2.QtCore.QPointF, toPoint:PySide2.QtCore.QPointF) -> typing.List: ...
    def leftBreakPoint3Ds(self) -> typing.List: ...
    def leftBreakPoints(self) -> typing.List: ...
    def length(self) -> float: ...
    def link(self) -> Tessng.ILink: ...
    def number(self) -> int: ...
    def polygon(self) -> PySide2.QtGui.QPolygonF: ...
    def rightBreak3DsPartly(self, fromPoint:PySide2.QtCore.QPointF, toPoint:PySide2.QtCore.QPointF) -> typing.List: ...
    def rightBreakPoint3Ds(self) -> typing.List: ...
    def rightBreakPoints(self) -> typing.List: ...
    def section(self) -> Tessng.ISection: ...
    def setLaneType(self, type:str) -> None: ...
    def setOtherAttr(self, attr:typing.Dict) -> None: ...
    def toLaneObject(self, id:int=...) -> Tessng.ILaneObject: ...
    def width(self) -> float: ...


class ILaneConnector(Tessng.ILaneObject):

    def __init__(self) -> None: ...

    def centerBreakPoint3Ds(self) -> typing.List: ...
    def centerBreakPoints(self) -> typing.List: ...
    def connector(self) -> Tessng.IConnector: ...
    def distToStartPoint(self, p:PySide2.QtCore.QPointF) -> float: ...
    def distToStartPointWithSegmIndex(self, p:PySide2.QtCore.QPointF, segmIndex:int=..., bOnCentLine:bool=...) -> float: ...
    def fromLane(self) -> Tessng.ILane: ...
    def fromLaneObject(self, id:int=...) -> Tessng.ILaneObject: ...
    def getPointAndIndexByDist(self, dist:float, outPoint:PySide2.QtCore.QPointF, outIndex:int) -> bool: ...
    def getPointByDist(self, dist:float, outPoint:PySide2.QtCore.QPointF) -> bool: ...
    def gtype(self) -> int: ...
    def id(self) -> int: ...
    def leftBreak3DsPartly(self, fromPoint:PySide2.QtCore.QPointF, toPoint:PySide2.QtCore.QPointF) -> typing.List: ...
    def leftBreakPoint3Ds(self) -> typing.List: ...
    def leftBreakPoints(self) -> typing.List: ...
    def length(self) -> float: ...
    def rightBreak3DsPartly(self, fromPoint:PySide2.QtCore.QPointF, toPoint:PySide2.QtCore.QPointF) -> typing.List: ...
    def rightBreakPoint3Ds(self) -> typing.List: ...
    def rightBreakPoints(self) -> typing.List: ...
    def section(self) -> Tessng.ISection: ...
    def setOtherAttr(self, attr:typing.Dict) -> None: ...
    def toLane(self) -> Tessng.ILane: ...
    def toLaneObject(self, id:int=...) -> Tessng.ILaneObject: ...


class ILaneObject(Shiboken.Object):

    def __init__(self) -> None: ...

    def castToLane(self) -> Tessng.ILane: ...
    def castToLaneConnector(self) -> Tessng.ILaneConnector: ...
    def centerBreakPoint3Ds(self) -> typing.List: ...
    def centerBreakPoints(self) -> typing.List: ...
    def distToStartPoint(self, p:PySide2.QtCore.QPointF) -> float: ...
    def distToStartPointWithSegmIndex(self, p:PySide2.QtCore.QPointF, segmIndex:int=..., bOnCentLine:bool=...) -> float: ...
    def fromLaneObject(self, id:int=...) -> Tessng.ILaneObject: ...
    def getPointAndIndexByDist(self, dist:float, outPoint:PySide2.QtCore.QPointF, outIndex:int) -> bool: ...
    def getPointByDist(self, dist:float, outPoint:PySide2.QtCore.QPointF) -> bool: ...
    def gtype(self) -> int: ...
    def id(self) -> int: ...
    def isLane(self) -> bool: ...
    def leftBreak3DsPartly(self, fromPoint:PySide2.QtCore.QPointF, toPoint:PySide2.QtCore.QPointF) -> typing.List: ...
    def leftBreakPoint3Ds(self) -> typing.List: ...
    def leftBreakPoints(self) -> typing.List: ...
    def length(self) -> float: ...
    def rightBreak3DsPartly(self, fromPoint:PySide2.QtCore.QPointF, toPoint:PySide2.QtCore.QPointF) -> typing.List: ...
    def rightBreakPoint3Ds(self) -> typing.List: ...
    def rightBreakPoints(self) -> typing.List: ...
    def section(self) -> Tessng.ISection: ...
    def setOtherAttr(self, attr:typing.Dict) -> None: ...
    def toLaneObject(self, id:int=...) -> Tessng.ILaneObject: ...


class ILink(Tessng.ISection):

    def __init__(self) -> None: ...

    def castToConnector(self) -> Tessng.IConnector: ...
    def castToLink(self) -> Tessng.ILink: ...
    def centerBreakPoint3Ds(self) -> typing.List: ...
    def centerBreakPoints(self) -> typing.List: ...
    def distToStartPoint(self, p:PySide2.QtCore.QPointF) -> float: ...
    def fromConnectors(self) -> typing.List: ...
    def fromSection(self, id:int=...) -> Tessng.ISection: ...
    def getPointAndIndexByDist(self, dist:float, outPoint:PySide2.QtCore.QPointF, outIndex:int) -> bool: ...
    def getPointByDist(self, dist:float, outPoint:PySide2.QtCore.QPointF) -> bool: ...
    def gtype(self) -> int: ...
    def id(self) -> int: ...
    def laneCount(self) -> int: ...
    def laneObjects(self) -> typing.List: ...
    def lanes(self) -> typing.List: ...
    def leftBreakPoint3Ds(self) -> typing.List: ...
    def leftBreakPoints(self) -> typing.List: ...
    def length(self) -> float: ...
    def limitSpeed(self) -> float: ...
    def linkType(self) -> str: ...
    def minSpeed(self) -> float: ...
    def name(self) -> str: ...
    def polygon(self) -> PySide2.QtGui.QPolygonF: ...
    def rightBreakPoint3Ds(self) -> typing.List: ...
    def rightBreakPoints(self) -> typing.List: ...
    def setLaneOtherAtrrs(self, lAttrs:typing.Sequence) -> None: ...
    def setLaneTypes(self, lType:typing.Sequence) -> None: ...
    def setLimitSpeed(self, speed:float) -> None: ...
    def setName(self, name:str) -> None: ...
    def setOtherAttr(self, otherAttr:typing.Dict) -> None: ...
    def setType(self, type:str) -> None: ...
    def toConnectors(self) -> typing.List: ...
    def toSection(self, id:int=...) -> Tessng.ISection: ...
    def v3z(self) -> float: ...
    def width(self) -> float: ...
    def z(self) -> float: ...


class IRoadNet(Shiboken.Object):

    def __init__(self) -> None: ...

    def bkgUrl(self) -> str: ...
    def centerPoint(self) -> PySide2.QtCore.QPointF: ...
    def explain(self) -> str: ...
    def id(self) -> int: ...
    def netName(self) -> str: ...
    def otherAttrs(self) -> typing.Dict: ...
    def type(self) -> str: ...
    def url(self) -> str: ...


class IRoadWorkZone(Shiboken.Object):

    def __init__(self) -> None: ...

    def duration(self) -> int: ...
    def id(self) -> int: ...
    def laneObjects(self) -> typing.List: ...
    def limitSpeed(self) -> float: ...
    def location(self) -> float: ...
    def name(self) -> str: ...
    def sectionId(self) -> int: ...
    def sectionName(self) -> str: ...
    def sectionType(self) -> str: ...
    def zoneLength(self) -> float: ...


class IRouting(Shiboken.Object):

    def __init__(self) -> None: ...

    def calcuLength(self) -> float: ...
    def contain(self, pRoad:Tessng.ISection) -> bool: ...
    def deciPointId(self) -> int: ...
    def getLinks(self) -> typing.List: ...
    def id(self) -> int: ...
    def nextRoad(self, pRoad:Tessng.ISection) -> Tessng.ISection: ...


class ISection(Shiboken.Object):

    def __init__(self) -> None: ...

    def castToConnector(self) -> Tessng.IConnector: ...
    def castToLink(self) -> Tessng.ILink: ...
    def fromSection(self, id:int=...) -> Tessng.ISection: ...
    def fromWorkerKey(self) -> int: ...
    def gtype(self) -> int: ...
    def id(self) -> int: ...
    def isLink(self) -> bool: ...
    def laneObjects(self) -> typing.List: ...
    def length(self) -> float: ...
    def name(self) -> str: ...
    def polygon(self) -> PySide2.QtGui.QPolygonF: ...
    def sectionId(self) -> int: ...
    def setFromWorkerKey(self, key:int) -> None: ...
    def setName(self, name:str) -> None: ...
    def setOtherAttr(self, otherAttr:typing.Dict) -> None: ...
    def setWorkerKey(self, key:int) -> None: ...
    def toSection(self, id:int=...) -> Tessng.ISection: ...
    def v3z(self) -> float: ...
    def workerKey(self) -> int: ...


class ISignalGroup(Shiboken.Object):

    def __init__(self) -> None: ...

    def fromTime(self) -> int: ...
    def groupName(self) -> str: ...
    def id(self) -> int: ...
    def periodTime(self) -> int: ...
    def phases(self) -> typing.List: ...
    def setFromTime(self, time:int) -> None: ...
    def setName(self, name:str) -> None: ...
    def setPeriodTime(self, period:int) -> None: ...
    def setToTime(self, time:int) -> None: ...
    def toTime(self) -> int: ...


class ISignalLamp(Shiboken.Object):

    def __init__(self) -> None: ...

    def id(self) -> int: ...
    def polygon(self) -> PySide2.QtGui.QPolygonF: ...
    def setDistToStart(self, dist:float) -> None: ...
    def setLampColor(self, colorStr:str) -> None: ...
    def setName(self, name:str) -> None: ...
    def signalGroup(self) -> Tessng.ISignalGroup: ...
    def signalPhase(self) -> Tessng.ISignalPhase: ...


class ISignalPhase(Shiboken.Object):

    def __init__(self) -> None: ...

    def id(self) -> int: ...
    def number(self) -> int: ...
    def phaseName(self) -> str: ...
    def setNumber(self, number:int) -> None: ...
    def setPhaseName(self, name:str) -> None: ...
    def signalGroup(self) -> Tessng.ISignalGroup: ...
    def signalLamps(self) -> typing.List: ...


class IVehicle(Shiboken.Object):

    def __init__(self) -> None: ...

    def acce(self) -> float: ...
    def angle(self) -> float: ...
    def boundingPolygon(self) -> PySide2.QtGui.QPolygonF: ...
    def currBatchNumber(self) -> int: ...
    def currSpeed(self) -> float: ...
    def driving(self) -> None: ...
    def dynaInfo(self) -> int: ...
    def id(self) -> int: ...
    def initLane(self, laneNumber:int, dist:float=..., speed:float=...) -> None: ...
    def initLaneConnector(self, laneNumber:int, toLaneNumber:int, dist:float=..., speed:float=...) -> None: ...
    def initSpeed(self, speed:float=...) -> float: ...
    def isStarted(self) -> bool: ...
    def jsonInfo(self) -> typing.Dict: ...
    def lLaneObjectVertex(self) -> typing.List: ...
    def lane(self) -> Tessng.ILane: ...
    def laneConnector(self) -> Tessng.ILaneConnector: ...
    def laneId(self) -> int: ...
    def length(self) -> float: ...
    def limitMaxSpeed(self) -> float: ...
    def limitMinSpeed(self) -> float: ...
    def name(self) -> str: ...
    def picture(self) -> PySide2.QtGui.QPicture: ...
    def pos(self) -> PySide2.QtCore.QPointF: ...
    def road(self) -> int: ...
    def roadId(self) -> int: ...
    def roadIsLink(self) -> bool: ...
    def roadName(self) -> str: ...
    def roadType(self) -> int: ...
    def routing(self) -> Tessng.IRouting: ...
    def section(self) -> Tessng.ISection: ...
    def segmIndex(self) -> int: ...
    def setColor(self, color:str) -> None: ...
    def setDynaInfo(self, pDynaInfo:int) -> None: ...
    def setIsPermitForVehicleDraw(self, bDraw:bool) -> None: ...
    def setJsonInfo(self, info:typing.Dict) -> None: ...
    def setJsonProperty(self, key:str, value:typing.Any) -> None: ...
    def setLength(self, len:float, bRestWidth:bool=...) -> None: ...
    def setSteps_afterCalcTracingType(self, steps:int) -> None: ...
    def setSteps_afterStep(self, steps:int) -> None: ...
    def setSteps_beforeMergingToLane(self, steps:int) -> None: ...
    def setSteps_beforeNextPoint(self, steps:int) -> None: ...
    def setSteps_beforeNextRoad(self, steps:int) -> None: ...
    def setSteps_calcAcce(self, steps:int) -> None: ...
    def setSteps_calcChangeLaneSafeDist(self, steps:int) -> None: ...
    def setSteps_calcDistToEventObj(self, steps:int) -> None: ...
    def setSteps_calcLimitedLaneNumber(self, steps:int) -> None: ...
    def setSteps_calcMaxLimitedSpeed(self, steps:int) -> None: ...
    def setSteps_calcSpeedLimitByLane(self, steps:int) -> None: ...
    def setSteps_isStopDriving(self, steps:int) -> None: ...
    def setSteps_judgeIfOnTargetLane(self, steps:int) -> None: ...
    def setSteps_leaveOffChangingTrace(self, steps:int) -> None: ...
    def setSteps_nextPoint(self, steps:int) -> None: ...
    def setSteps_reCalcAngle(self, steps:int) -> None: ...
    def setSteps_reCalcToLeftFreely(self, steps:int) -> None: ...
    def setSteps_reCalcToLeftLane(self, steps:int) -> None: ...
    def setSteps_reCalcToRightFreely(self, steps:int) -> None: ...
    def setSteps_reCalcToRightLane(self, steps:int) -> None: ...
    def setSteps_reCalcdesirSpeed(self, steps:int) -> None: ...
    def setSteps_reSetAcce(self, steps:int) -> None: ...
    def setSteps_reSetFollowingType(self, steps:int) -> None: ...
    def setSteps_reSetSpeed(self, steps:int) -> None: ...
    def setSteps_recentTimeOfSpeedAndPos(self, steps:int) -> None: ...
    def setSteps_travelOnChangingTrace(self, steps:int) -> None: ...
    def setTag(self, tag:int) -> None: ...
    def setVehiType(self, code:int) -> None: ...
    def startLink(self) -> Tessng.ILink: ...
    def startSimuTime(self) -> int: ...
    def tag(self) -> int: ...
    def toLane(self) -> Tessng.ILane: ...
    def toLaneId(self) -> int: ...
    def useCache(self, bCache:bool) -> None: ...
    def vehiDistFront(self) -> float: ...
    def vehiDistLLaneFront(self) -> float: ...
    def vehiDistLLaneRear(self) -> float: ...
    def vehiDistRLaneFront(self) -> float: ...
    def vehiDistRLaneRear(self) -> float: ...
    def vehiDistRear(self) -> float: ...
    def vehiHeadwayFront(self) -> float: ...
    def vehiHeadwaytoRear(self) -> float: ...
    def vehiSpeedFront(self) -> float: ...
    def vehiSpeedLLaneFront(self) -> float: ...
    def vehiSpeedLLaneRear(self) -> float: ...
    def vehiSpeedRLaneFront(self) -> float: ...
    def vehiSpeedRLaneRear(self) -> float: ...
    def vehiSpeedRear(self) -> float: ...
    def vehicleDriving(self) -> Tessng.IVehicleDriving: ...
    def vehicleFront(self) -> Tessng.IVehicle: ...
    def vehicleLFront(self) -> Tessng.IVehicle: ...
    def vehicleLRear(self) -> Tessng.IVehicle: ...
    def vehicleRFront(self) -> Tessng.IVehicle: ...
    def vehicleRRear(self) -> Tessng.IVehicle: ...
    def vehicleRear(self) -> Tessng.IVehicle: ...
    def vehicleTypeCode(self) -> int: ...
    def vehicleTypeName(self) -> str: ...
    def zValue(self) -> float: ...


class IVehicleDrivInfoCollector(Shiboken.Object):

    def __init__(self) -> None: ...

    def aggregateInterval(self) -> int: ...
    def collName(self) -> str: ...
    def connector(self) -> Tessng.IConnector: ...
    def distToStart(self) -> float: ...
    def fromTime(self) -> int: ...
    def id(self) -> int: ...
    def lane(self) -> Tessng.ILane: ...
    def laneConnector(self) -> Tessng.ILaneConnector: ...
    def link(self) -> Tessng.ILink: ...
    def onLink(self) -> bool: ...
    def point(self) -> PySide2.QtCore.QPointF: ...
    def polygon(self) -> PySide2.QtGui.QPolygonF: ...
    def setAggregateInterval(self, interval:int) -> None: ...
    def setDistToStart(self, dist:float) -> None: ...
    def setFromTime(self, time:int) -> None: ...
    def setName(self, name:str) -> None: ...
    def setToTime(self, time:int) -> None: ...
    def toTime(self) -> int: ...


class IVehicleDriving(Shiboken.Object):

    def __init__(self) -> None: ...

    def angle(self) -> float: ...
    def calcTraceLength(self) -> None: ...
    def changingTrace(self) -> typing.List: ...
    def changingTraceLength(self) -> float: ...
    def currDistance(self) -> float: ...
    def currDistanceInRoad(self) -> float: ...
    def currDistanceInSegment(self) -> float: ...
    def desirSpeed(self) -> float: ...
    def differToTargetLaneNumber(self) -> int: ...
    def distToEndpoint(self, fromVehiHead:bool=...) -> float: ...
    def followingType(self) -> int: ...
    def getCurrRoad(self) -> Tessng.ISection: ...
    def getNextRoad(self) -> Tessng.ISection: ...
    def getRandomNumber(self) -> int: ...
    def getVehiDrivDistance(self) -> float: ...
    def getVehicleNegotiated(self) -> Tessng.IVehicle: ...
    def initTrace(self) -> None: ...
    def isHavingDeciPointOnLink(self) -> bool: ...
    def isOnRouting(self) -> bool: ...
    def laneNumber(self) -> int: ...
    def move(self, pILaneObject:Tessng.ILaneObject, dist:float) -> bool: ...
    def moveToLane(self, pLane:Tessng.ILane, dist:float) -> bool: ...
    def moveToLaneConnector(self, pLaneConnector:Tessng.ILaneConnector, dist:float) -> bool: ...
    def nextPoint(self) -> bool: ...
    def routing(self) -> Tessng.IRouting: ...
    def setAngle(self, angle:float) -> None: ...
    def setChangingTracingType(self, b:bool) -> None: ...
    def setCurrDistanceInRoad(self, dist:float) -> None: ...
    def setCurrDistanceInSegment(self, dist:float) -> None: ...
    def setCurrDistanceInTrace(self, dist:float) -> None: ...
    def setFollowingType(self, followingType:int, interval:int=..., pIVehicleNegotiated:Tessng.IVehicle=...) -> None: ...
    def setIndexOfSegmInTrace(self, index:int) -> None: ...
    def setLaneNumber(self, number:int) -> None: ...
    def setRouting(self, pRouting:Tessng.IRouting) -> bool: ...
    def setSegmentIndex(self, index:int) -> None: ...
    def setTrace(self, lPoint:typing.Sequence) -> None: ...
    def setTracingType(self, type:int) -> None: ...
    def setVehiDrivDistance(self, dist:float) -> None: ...
    def setX(self, posX:float) -> None: ...
    def setY(self, posY:float) -> None: ...
    def stopVehicle(self) -> None: ...
    def toLeftLane(self, bFource:bool=...) -> None: ...
    def toRightLane(self, bFource:bool=...) -> None: ...
    def tracingType(self) -> int: ...
    def vehicle(self) -> Tessng.IVehicle: ...
    def zeroSpeedInterval(self) -> int: ...


class IVehicleDrivingManagerTask(Shiboken.Object):

    def __init__(self) -> None: ...

    def acceMultiplesReally(self) -> float: ...
    def batchIntervalReally(self) -> float: ...
    def currBatchNumber(self) -> int: ...
    def finished(self) -> bool: ...
    def isStoppeed(self) -> bool: ...
    def releaseVehiclesAndDetecInfos(self) -> None: ...
    def running(self) -> bool: ...
    def setBatchNumber(self, number:int) -> None: ...
    def setStopped(self, stopped:bool) -> None: ...
    def timeOnBatchNumber(self, batchNumber:int) -> int: ...


class IVehicleDrivingTask(Shiboken.Object):

    def __init__(self) -> None: ...

    def currBatchNumber(self) -> int: ...
    def finished(self) -> bool: ...
    def id(self) -> int: ...
    def outTime(self) -> bool: ...
    def running(self) -> bool: ...
    def semaphoreAvailable(self) -> int: ...
    def setStopped(self, stopped:bool) -> None: ...
    def startTask(self, currBatchNumber:int=...) -> None: ...


class IVehicleQueueCounter(Shiboken.Object):

    def __init__(self) -> None: ...

    def aggregateInterval(self) -> int: ...
    def connector(self) -> Tessng.IConnector: ...
    def counterName(self) -> str: ...
    def distToStart(self) -> float: ...
    def fromTime(self) -> int: ...
    def id(self) -> int: ...
    def lane(self) -> Tessng.ILane: ...
    def laneConnector(self) -> Tessng.ILaneConnector: ...
    def link(self) -> Tessng.ILink: ...
    def onLink(self) -> bool: ...
    def point(self) -> PySide2.QtCore.QPointF: ...
    def polygon(self) -> PySide2.QtGui.QPolygonF: ...
    def setAggregateInterval(self, interval:int) -> None: ...
    def setDistToStart(self, dist:float) -> None: ...
    def setFromTime(self, time:int) -> None: ...
    def setName(self, name:str) -> None: ...
    def setToTime(self, time:int) -> None: ...
    def toTime(self) -> int: ...


class IVehicleSupervisor(Shiboken.Object):

    def __init__(self) -> None: ...

    def distanceTwoVehicle(self, pV1:Tessng.IVehicle, pV2:Tessng.IVehicle) -> float: ...
    def vehisInConnector(self, connectorId:int) -> typing.List: ...
    def vehisInLane(self, laneId:int) -> typing.List: ...
    def vehisInLaneConnector(self, connectorId:int, fromLaneId:int, toLaneId:int) -> typing.List: ...
    def vehisInLink(self, linkId:int) -> typing.List: ...


class IVehicleTravelDetector(Shiboken.Object):

    def __init__(self) -> None: ...

    def aggregateInterval(self) -> int: ...
    def detectorName(self) -> str: ...
    def distance_endDetector(self) -> float: ...
    def distance_startDetector(self) -> float: ...
    def fromTime(self) -> int: ...
    def id(self) -> int: ...
    def isOnLink_endDetector(self) -> bool: ...
    def isOnLink_startDetector(self) -> bool: ...
    def isStartDetector(self) -> bool: ...
    def laneConnector_endDetector(self) -> Tessng.ILaneConnector: ...
    def laneConnector_startDetector(self) -> Tessng.ILaneConnector: ...
    def link_endDetector(self) -> Tessng.ILink: ...
    def link_startDetector(self) -> Tessng.ILink: ...
    def point_endDetector(self) -> PySide2.QtCore.QPointF: ...
    def point_startDetector(self) -> PySide2.QtCore.QPointF: ...
    def polygon_endDetector(self) -> PySide2.QtGui.QPolygonF: ...
    def polygon_startDetector(self) -> PySide2.QtGui.QPolygonF: ...
    def setAggregateInterval(self, interval:int) -> None: ...
    def setDistance_endDetector(self, dist:float) -> None: ...
    def setDistance_startDetector(self, dist:float) -> None: ...
    def setFromTime(self, time:int) -> None: ...
    def setName(self, name:str) -> None: ...
    def setToTime(self, time:int) -> None: ...
    def toTime(self) -> int: ...


class NetInterface(Shiboken.Object):

    def __init__(self) -> None: ...

    def addBusStationToLine(self, pBusLine:Tessng.IBusLine, pStation:Tessng.IBusStation) -> bool: ...
    def allConnectorArea(self) -> typing.List: ...
    def angleToItem(self, angle:float) -> float: ...
    def backgroundMap(self) -> PySide2.QtCore.QByteArray: ...
    def boundingRect(self) -> PySide2.QtCore.QRectF: ...
    def buildNetGrid(self, width:float=...) -> None: ...
    def busStations(self) -> typing.List: ...
    def buslines(self) -> typing.List: ...
    def connectorCount(self) -> int: ...
    def connectorIds(self) -> typing.List: ...
    def connectors(self) -> typing.List: ...
    def createAccidentZone(self, param:Tessng.Online.DynaAccidentZoneParam) -> Tessng.IAccidentZone: ...
    def createBusLine(self, lLink:typing.Sequence) -> Tessng.IBusLine: ...
    def createBusStation(self, pLane:Tessng.ILane, length:float, dist:float, name:str=...) -> Tessng.IBusStation: ...
    def createConnector(self, fromLinkId:int, toLinkId:int, lFromLaneNumber:typing.Sequence, lToLaneNumber:typing.Sequence, connName:str=..., bAddToScene:bool=...) -> Tessng.IConnector: ...
    def createConnector3DWithPoints(self, fromLinkId:int, toLinkId:int, lFromLaneNumber:typing.Sequence, lToLaneNumber:typing.Sequence, laneConnectorWithPoints:typing.Sequence, connName:str=..., bAddToScene:bool=...) -> Tessng.IConnector: ...
    def createDeciRouting(self, pDeciPoint:Tessng.IDecisionPoint, lILink:typing.Sequence) -> Tessng.IRouting: ...
    def createDecisionPoint(self, pLink:Tessng.ILink, distance:float, name:str=...) -> Tessng.IDecisionPoint: ...
    def createDispatchPoint(self, pLink:Tessng.ILink, dpName:str=..., bAddToScene:bool=...) -> Tessng.IDispatchPoint: ...
    def createEmptyNetFile(self, filePath:str, dbver:int=...) -> bool: ...
    def createLink(self, lCenterPoint:typing.Sequence, laneCount:int, linkName:str=..., bAddToScene:bool=...) -> Tessng.ILink: ...
    def createLink3D(self, lCenterV3:typing.Sequence, laneCount:int, linkName:str=..., bAddToScene:bool=...) -> Tessng.ILink: ...
    def createLink3DWithLanePoints(self, lCenterLineV3:typing.Sequence, lanesWithPoints:typing.Sequence, linkName:str=..., bAddToScene:bool=...) -> Tessng.ILink: ...
    def createLink3DWithLanePointsAndAttrs(self, lCenterLineV3:typing.Sequence, lanesWithPoints:typing.Sequence, lLaneType:typing.Sequence, lAttr:typing.Sequence=..., linkName:str=..., bAddToScene:bool=...) -> Tessng.ILink: ...
    def createLink3DWithLaneWidth(self, lCenterV3:typing.Sequence, lLaneWidth:typing.Sequence, linkName:str=..., bAddToScene:bool=...) -> Tessng.ILink: ...
    def createLinkWithLaneWidth(self, lCenterPoint:typing.Sequence, lLaneWidth:typing.Sequence, linkName:str=..., bAddToScene:bool=...) -> Tessng.ILink: ...
    def createRoadWorkZone(self, param:Tessng.Online.DynaRoadWorkZoneParam) -> Tessng.IRoadWorkZone: ...
    def createRouting(self, lILink:typing.Sequence) -> Tessng.IRouting: ...
    def createSignalGroup(self, name:str, period:int, fromTime:int, toTime:int) -> Tessng.ISignalGroup: ...
    def createSignalLamp(self, pPhase:Tessng.ISignalPhase, name:str, laneId:int, toLaneId:int, distance:float) -> Tessng.ISignalLamp: ...
    def createVehiCollectorOnConnector(self, pLaneConnector:Tessng.ILaneConnector, dist:float) -> Tessng.IVehicleDrivInfoCollector: ...
    def createVehiCollectorOnLink(self, pLane:Tessng.ILane, dist:float) -> Tessng.IVehicleDrivInfoCollector: ...
    def createVehiQueueCounterOnConnector(self, pLaneConnector:Tessng.ILaneConnector, dist:float) -> Tessng.IVehicleQueueCounter: ...
    def createVehiQueueCounterOnLink(self, pLane:Tessng.ILane, dist:float) -> Tessng.IVehicleQueueCounter: ...
    def createVehicleComposition(self, name:str, lVehiComp:typing.Sequence) -> int: ...
    def createVehicleTravelDetector_conn2conn(self, pStartLaneConnector:Tessng.ILaneConnector, pEndLaneConnector:Tessng.ILaneConnector, dist1:float, dist2:float) -> typing.List: ...
    def createVehicleTravelDetector_conn2link(self, pStartLaneConnector:Tessng.ILaneConnector, pEndLink:Tessng.ILink, dist1:float, dist2:float) -> typing.List: ...
    def createVehicleTravelDetector_link2conn(self, pStartLink:Tessng.ILink, pEndLaneConnector:Tessng.ILaneConnector, dist1:float, dist2:float) -> typing.List: ...
    def createVehicleTravelDetector_link2link(self, pStartLink:Tessng.ILink, pEndLink:Tessng.ILink, dist1:float, dist2:float) -> typing.List: ...
    def createVehicleType(self, _vt:Tessng._VehicleType) -> bool: ...
    def crossPoints(self, pLaneConnector:Tessng.ILaneConnector) -> typing.List: ...
    def decisionPoints(self) -> typing.List: ...
    def dispatchPoints(self) -> typing.List: ...
    def findBusStation(self, stationId:int) -> Tessng.IBusStation: ...
    def findBusline(self, buslineId:int) -> Tessng.IBusLine: ...
    def findBuslineByFirstLinkId(self, linkId:int) -> Tessng.IBusLine: ...
    def findConnector(self, id:int) -> Tessng.IConnector: ...
    def findConnectorArea(self, id:int) -> Tessng.IConnectorArea: ...
    def findConnectorByLinkIds(self, fromLinkId:int, toLinkId:int) -> Tessng.IConnector: ...
    def findDecisionPoint(self, id:int) -> Tessng.IDecisionPoint: ...
    def findDispatchPoint(self, id:int) -> Tessng.IDispatchPoint: ...
    def findLane(self, id:int) -> Tessng.ILane: ...
    @typing.overload
    def findLaneConnector(self, fromLaneId:int, toLaneId:int) -> Tessng.ILaneConnector: ...
    def findLink(self, id:int) -> Tessng.ILink: ...
    def findRouting(self, id:int) -> Tessng.IRouting: ...
    def findSectionOn1Cell(self, point:PySide2.QtCore.QPointF) -> typing.List: ...
    def findSectionOn4Cell(self, point:PySide2.QtCore.QPointF) -> typing.List: ...
    def findSectionOn9Cell(self, point:PySide2.QtCore.QPointF) -> typing.List: ...
    def findSignalGroup(self, id:int) -> Tessng.ISignalGroup: ...
    def findSignalLamp(self, id:int) -> Tessng.ISignalLamp: ...
    def findSignalPhase(self, id:int) -> Tessng.ISignalPhase: ...
    def findVehiInfoCollector(self, id:int) -> Tessng.IVehicleDrivInfoCollector: ...
    def findVehiQueueCounter(self, id:int) -> Tessng.IVehicleQueueCounter: ...
    def findVehiTravelDetector(self, id:int) -> Tessng.IVehicleTravelDetector: ...
    def getIDByItemName(self, name:str) -> int: ...
    def graphicsScene(self) -> PySide2.QtWidgets.QGraphicsScene: ...
    def graphicsView(self) -> PySide2.QtWidgets.QGraphicsView: ...
    def guidArrowCount(self) -> int: ...
    def guidArrowIds(self) -> typing.List: ...
    def initSequence(self, schemaName:str=...) -> bool: ...
    def judgeLinkToCross(self, linkId:int) -> bool: ...
    def laneCenterPoints(self, laneId:int) -> typing.List: ...
    def linkCenterPoints(self, linkId:int) -> typing.List: ...
    def linkCount(self) -> int: ...
    def linkIds(self) -> typing.List: ...
    def links(self) -> typing.List: ...
    def locateOnCrid(self, point:PySide2.QtCore.QPointF, cellCount:int=...) -> typing.List: ...
    def locateOnSections(self, point:PySide2.QtCore.QPointF, lSection:typing.Sequence, referDistance:float=...) -> typing.List: ...
    def netAttrs(self) -> Tessng.IRoadNet: ...
    def netFilePath(self) -> str: ...
    def openNetByNetId(self, netId:int) -> None: ...
    def openNetFle(self, filePath:str) -> None: ...
    def removeBusLine(self, pBusLine:Tessng.IBusLine) -> bool: ...
    def removeBusStation(self, pStation:Tessng.IBusStation) -> bool: ...
    def removeBusStationFromLine(self, pBusLine:Tessng.IBusLine, pStation:Tessng.IBusStation) -> bool: ...
    def removeConnector(self, pConnector:Tessng.IConnector) -> None: ...
    def removeDeciRouting(self, pDeciPoint:Tessng.IDecisionPoint, pRouting:Tessng.IRouting) -> bool: ...
    def removeDispatchPoint(self, pDispPoint:Tessng.IDispatchPoint) -> bool: ...
    def removeLink(self, pLink:Tessng.ILink) -> None: ...
    def removeSignalPhase(self, pGroup:Tessng.ISignalGroup, phaseId:int) -> None: ...
    def removeVehiCollector(self, pCollector:Tessng.IVehicleDrivInfoCollector) -> bool: ...
    def roadNet(self) -> Tessng.IRoadNet: ...
    def saveRoadNet(self) -> bool: ...
    def sceneHeigth(self) -> float: ...
    def sceneScale(self) -> float: ...
    def sceneWidth(self) -> float: ...
    def sections(self) -> typing.List: ...
    def setNetAttrs(self, name:str, sourceType:str=..., centerPoint:PySide2.QtCore.QPointF=..., backgroundUrl:str=..., otherAttrsJson:typing.Dict=...) -> Tessng.IRoadNet: ...
    def setSceneSize(self, w:float, h:float) -> None: ...
    def shortestRouting(self, pFromLink:Tessng.ILink, pToLink:Tessng.ILink) -> Tessng.IRouting: ...
    def signalGroupCount(self) -> int: ...
    def signalGroupIds(self) -> typing.List: ...
    def signalGroups(self) -> typing.List: ...
    def signalLampCount(self) -> int: ...
    def signalLampIds(self) -> typing.List: ...
    def signalLamps(self) -> typing.List: ...
    def updateConnector(self, connector:Tessng._Connector) -> Tessng.IConnector: ...
    def updateDecipointPoint(self, deciPoint:Tessng._DecisionPoint, lFlowRatio:typing.Sequence=...) -> Tessng.IDecisionPoint: ...
    def updateLink(self, link:Tessng._Link, lLane:typing.Sequence=..., lPoint:typing.Sequence=...) -> Tessng.ILink: ...
    def vehiInfoCollectors(self) -> typing.List: ...
    def vehiQueueCounters(self) -> typing.List: ...
    def vehiTravelDetectors(self) -> typing.List: ...


class NetItemType(Shiboken.Object):
    GAccidentZoneType = 66539
    GBusLineType = 65551
    GBusStationType = 65550
    GConnectorAreaType = 65553
    GConnectorType = 65540
    GDecisionType = 65542
    GDeparturePointType = 65543
    GGuideArrowType = 65552
    GLaneConnectorType = 65541
    GLaneType = 65539
    GLinkCenterType = 65554
    GLinkType = 65538
    GReduceSpeedAreaType = 65549
    GRoadWorkZoneType = 66538
    GRsuType = 66537
    GSignalLampType = 65545
    GVehicleDetectorType = 65555
    GVehicleDrivInfoCollecterType = 65546
    GVehicleQueueCounterType = 65547
    GVehicleTravelDetectorType = 65548
    GVehicleType = 65544
    GVertexType = 65537
    LaneConnectorType = 65638
    LaneType = 65637

    @typing.overload
    def __init__(self, NetItemType:Tessng.NetItemType) -> None: ...

    @staticmethod
    def __copy__() -> None: ...


class Online(Shiboken.Object):
    Motor: Tessng.Online.MotorOrNonmotor # value = Tessng.Online.MotorOrNonmotor.Motor
    Nonmotor: Tessng.Online.MotorOrNonmotor # value = Tessng.Online.MotorOrNonmotor.Nonmotor

    class CrossPoint(Shiboken.Object):
        mCrossPoint: getset_descriptor # value = <attribute 'mCrossPoint' of 'Tessng.Online.CrossPoint' objects>
        mpLaneConnector: getset_descriptor # value = <attribute 'mpLaneConnector' of 'Tessng.Online.CrossPoint' objects>
        mpMainLaneConnector: getset_descriptor # value = <attribute 'mpMainLaneConnector' of 'Tessng.Online.CrossPoint' objects>
        mrDistance: getset_descriptor # value = <attribute 'mrDistance' of 'Tessng.Online.CrossPoint' objects>
        mrSegmIndex: getset_descriptor # value = <attribute 'mrSegmIndex' of 'Tessng.Online.CrossPoint' objects>

        @typing.overload
        def __init__(self, CrossPoint:Tessng.Online.CrossPoint) -> None: ...

        @staticmethod
        def __copy__() -> None: ...

    class DecipointFlowRatioByInterval(Shiboken.Object):
        deciPointID: getset_descriptor # value = <attribute 'deciPointID' of 'Tessng.Online.DecipointFlowRatioByInterval' objects>
        endDateTime: getset_descriptor # value = <attribute 'endDateTime' of 'Tessng.Online.DecipointFlowRatioByInterval' objects>
        mlRoutingFlowRatio: getset_descriptor # value = <attribute 'mlRoutingFlowRatio' of 'Tessng.Online.DecipointFlowRatioByInterval' objects>
        startDateTime: getset_descriptor # value = <attribute 'startDateTime' of 'Tessng.Online.DecipointFlowRatioByInterval' objects>

        @typing.overload
        def __init__(self, DecipointFlowRatioByInterval:Tessng.Online.DecipointFlowRatioByInterval) -> None: ...

        @staticmethod
        def __copy__() -> None: ...

    class DispatchInterval(Shiboken.Object):
        dispatchId: getset_descriptor # value = <attribute 'dispatchId' of 'Tessng.Online.DispatchInterval' objects>
        fromTime: getset_descriptor # value = <attribute 'fromTime' of 'Tessng.Online.DispatchInterval' objects>
        mlVehicleConsDetail: getset_descriptor # value = <attribute 'mlVehicleConsDetail' of 'Tessng.Online.DispatchInterval' objects>
        toTime: getset_descriptor # value = <attribute 'toTime' of 'Tessng.Online.DispatchInterval' objects>
        vehiCount: getset_descriptor # value = <attribute 'vehiCount' of 'Tessng.Online.DispatchInterval' objects>

        @typing.overload
        def __init__(self, DispatchInterval:Tessng.Online.DispatchInterval) -> None: ...

        @staticmethod
        def __copy__() -> None: ...

    class DynaAccidentZoneParam(Shiboken.Object):
        duration: getset_descriptor # value = <attribute 'duration' of 'Tessng.Online.DynaAccidentZoneParam' objects>
        length: getset_descriptor # value = <attribute 'length' of 'Tessng.Online.DynaAccidentZoneParam' objects>
        level: getset_descriptor # value = <attribute 'level' of 'Tessng.Online.DynaAccidentZoneParam' objects>
        location: getset_descriptor # value = <attribute 'location' of 'Tessng.Online.DynaAccidentZoneParam' objects>
        mlFromLaneNumber: getset_descriptor # value = <attribute 'mlFromLaneNumber' of 'Tessng.Online.DynaAccidentZoneParam' objects>
        mlToLaneNumber: getset_descriptor # value = <attribute 'mlToLaneNumber' of 'Tessng.Online.DynaAccidentZoneParam' objects>
        name: getset_descriptor # value = <attribute 'name' of 'Tessng.Online.DynaAccidentZoneParam' objects>
        needRescue: getset_descriptor # value = <attribute 'needRescue' of 'Tessng.Online.DynaAccidentZoneParam' objects>
        rescueTime: getset_descriptor # value = <attribute 'rescueTime' of 'Tessng.Online.DynaAccidentZoneParam' objects>
        roadId: getset_descriptor # value = <attribute 'roadId' of 'Tessng.Online.DynaAccidentZoneParam' objects>
        waitTimeBeforeRescue: getset_descriptor # value = <attribute 'waitTimeBeforeRescue' of 'Tessng.Online.DynaAccidentZoneParam' objects>

        @typing.overload
        def __init__(self, DynaAccidentZoneParam:Tessng.Online.DynaAccidentZoneParam) -> None: ...

        @staticmethod
        def __copy__() -> None: ...

    class DynaRoadWorkZoneParam(Shiboken.Object):
        duration: getset_descriptor # value = <attribute 'duration' of 'Tessng.Online.DynaRoadWorkZoneParam' objects>
        length: getset_descriptor # value = <attribute 'length' of 'Tessng.Online.DynaRoadWorkZoneParam' objects>
        limitSpeed: getset_descriptor # value = <attribute 'limitSpeed' of 'Tessng.Online.DynaRoadWorkZoneParam' objects>
        location: getset_descriptor # value = <attribute 'location' of 'Tessng.Online.DynaRoadWorkZoneParam' objects>
        mlFromLaneNumber: getset_descriptor # value = <attribute 'mlFromLaneNumber' of 'Tessng.Online.DynaRoadWorkZoneParam' objects>
        mlToLaneNumber: getset_descriptor # value = <attribute 'mlToLaneNumber' of 'Tessng.Online.DynaRoadWorkZoneParam' objects>
        name: getset_descriptor # value = <attribute 'name' of 'Tessng.Online.DynaRoadWorkZoneParam' objects>
        roadId: getset_descriptor # value = <attribute 'roadId' of 'Tessng.Online.DynaRoadWorkZoneParam' objects>

        @typing.overload
        def __init__(self, DynaRoadWorkZoneParam:Tessng.Online.DynaRoadWorkZoneParam) -> None: ...

        @staticmethod
        def __copy__() -> None: ...

    class DynaVehiParam(Shiboken.Object):
        color: getset_descriptor # value = <attribute 'color' of 'Tessng.Online.DynaVehiParam' objects>
        dist: getset_descriptor # value = <attribute 'dist' of 'Tessng.Online.DynaVehiParam' objects>
        laneNumber: getset_descriptor # value = <attribute 'laneNumber' of 'Tessng.Online.DynaVehiParam' objects>
        name: getset_descriptor # value = <attribute 'name' of 'Tessng.Online.DynaVehiParam' objects>
        others: getset_descriptor # value = <attribute 'others' of 'Tessng.Online.DynaVehiParam' objects>
        roadId: getset_descriptor # value = <attribute 'roadId' of 'Tessng.Online.DynaVehiParam' objects>
        speed: getset_descriptor # value = <attribute 'speed' of 'Tessng.Online.DynaVehiParam' objects>
        toLaneNumber: getset_descriptor # value = <attribute 'toLaneNumber' of 'Tessng.Online.DynaVehiParam' objects>
        vehiTypeCode: getset_descriptor # value = <attribute 'vehiTypeCode' of 'Tessng.Online.DynaVehiParam' objects>

        @typing.overload
        def __init__(self, DynaVehiParam:Tessng.Online.DynaVehiParam) -> None: ...

        @staticmethod
        def __copy__() -> None: ...

    class FollowingModelParam(Shiboken.Object):
        alfa: getset_descriptor # value = <attribute 'alfa' of 'Tessng.Online.FollowingModelParam' objects>
        beit: getset_descriptor # value = <attribute 'beit' of 'Tessng.Online.FollowingModelParam' objects>
        safeDistance: getset_descriptor # value = <attribute 'safeDistance' of 'Tessng.Online.FollowingModelParam' objects>
        safeInterval: getset_descriptor # value = <attribute 'safeInterval' of 'Tessng.Online.FollowingModelParam' objects>
        vtype: getset_descriptor # value = <attribute 'vtype' of 'Tessng.Online.FollowingModelParam' objects>

        @typing.overload
        def __init__(self, FollowingModelParam:Tessng.Online.FollowingModelParam) -> None: ...

        @staticmethod
        def __copy__() -> None: ...

    class Location(Shiboken.Object):
        distToStart: getset_descriptor # value = <attribute 'distToStart' of 'Tessng.Online.Location' objects>
        leastDist: getset_descriptor # value = <attribute 'leastDist' of 'Tessng.Online.Location' objects>
        pLaneObject: getset_descriptor # value = <attribute 'pLaneObject' of 'Tessng.Online.Location' objects>
        point: getset_descriptor # value = <attribute 'point' of 'Tessng.Online.Location' objects>
        segmIndex: getset_descriptor # value = <attribute 'segmIndex' of 'Tessng.Online.Location' objects>

        @typing.overload
        def __init__(self, Location:Tessng.Online.Location) -> None: ...

        @staticmethod
        def __copy__() -> None: ...

    class MotorOrNonmotor(object):
        Motor: Tessng.Online.MotorOrNonmotor # value = Tessng.Online.MotorOrNonmotor.Motor
        Nonmotor: Tessng.Online.MotorOrNonmotor # value = Tessng.Online.MotorOrNonmotor.Nonmotor
        name: getset_descriptor # value = <attribute 'name' of 'Tessng.Online.MotorOrNonmotor' objects>
        values: dict # value = {'Motor': Tessng.Online.MotorOrNonmotor.Motor, 'Nonmotor': Tessng.Online.MotorOrNonmotor.Nonmotor}
        Motor                    : Online.MotorOrNonmotor = ... # 0x0
        Nonmotor                 : Online.MotorOrNonmotor = ... # 0x1

    class RoutingFlowRatio(Shiboken.Object):
        ratio: getset_descriptor # value = <attribute 'ratio' of 'Tessng.Online.RoutingFlowRatio' objects>
        routingID: getset_descriptor # value = <attribute 'routingID' of 'Tessng.Online.RoutingFlowRatio' objects>

        @typing.overload
        def __init__(self, RoutingFlowRatio:Tessng.Online.RoutingFlowRatio) -> None: ...

        @staticmethod
        def __copy__() -> None: ...

    class SignalContralParam(Shiboken.Object):
        crdinatedPhaseDiff: getset_descriptor # value = <attribute 'crdinatedPhaseDiff' of 'Tessng.Online.SignalContralParam' objects>
        crdinatedPhaseNum: getset_descriptor # value = <attribute 'crdinatedPhaseNum' of 'Tessng.Online.SignalContralParam' objects>
        day: getset_descriptor # value = <attribute 'day' of 'Tessng.Online.SignalContralParam' objects>
        fromTime: getset_descriptor # value = <attribute 'fromTime' of 'Tessng.Online.SignalContralParam' objects>
        mlPhaseGreen: getset_descriptor # value = <attribute 'mlPhaseGreen' of 'Tessng.Online.SignalContralParam' objects>
        period: getset_descriptor # value = <attribute 'period' of 'Tessng.Online.SignalContralParam' objects>
        redInterval: getset_descriptor # value = <attribute 'redInterval' of 'Tessng.Online.SignalContralParam' objects>
        signalGroupId: getset_descriptor # value = <attribute 'signalGroupId' of 'Tessng.Online.SignalContralParam' objects>
        toTime: getset_descriptor # value = <attribute 'toTime' of 'Tessng.Online.SignalContralParam' objects>
        yellowInterval: getset_descriptor # value = <attribute 'yellowInterval' of 'Tessng.Online.SignalContralParam' objects>

        @typing.overload
        def __init__(self, SignalContralParam:Tessng.Online.SignalContralParam) -> None: ...

        @staticmethod
        def __copy__() -> None: ...

    class SignalPhaseColor(Shiboken.Object):
        color: getset_descriptor # value = <attribute 'color' of 'Tessng.Online.SignalPhaseColor' objects>
        mrIntervalByNow: getset_descriptor # value = <attribute 'mrIntervalByNow' of 'Tessng.Online.SignalPhaseColor' objects>
        mrIntervalSetted: getset_descriptor # value = <attribute 'mrIntervalSetted' of 'Tessng.Online.SignalPhaseColor' objects>
        phaseId: getset_descriptor # value = <attribute 'phaseId' of 'Tessng.Online.SignalPhaseColor' objects>
        phaseNumber: getset_descriptor # value = <attribute 'phaseNumber' of 'Tessng.Online.SignalPhaseColor' objects>
        signalGroupId: getset_descriptor # value = <attribute 'signalGroupId' of 'Tessng.Online.SignalPhaseColor' objects>

        @typing.overload
        def __init__(self, SignalPhaseColor:Tessng.Online.SignalPhaseColor) -> None: ...

        @staticmethod
        def __copy__() -> None: ...

    class SimuConfig(Shiboken.Object):
        acceMultiples: getset_descriptor # value = <attribute 'acceMultiples' of 'Tessng.Online.SimuConfig' objects>
        simuAccuracy: getset_descriptor # value = <attribute 'simuAccuracy' of 'Tessng.Online.SimuConfig' objects>
        simuTimeInterval: getset_descriptor # value = <attribute 'simuTimeInterval' of 'Tessng.Online.SimuConfig' objects>
        threadCount: getset_descriptor # value = <attribute 'threadCount' of 'Tessng.Online.SimuConfig' objects>

        @typing.overload
        def __init__(self, SimuConfig:Tessng.Online.SimuConfig) -> None: ...

        @staticmethod
        def __copy__() -> None: ...

    class VehiComposition(Shiboken.Object):
        proportion: getset_descriptor # value = <attribute 'proportion' of 'Tessng.Online.VehiComposition' objects>
        vehiTypeCode: getset_descriptor # value = <attribute 'vehiTypeCode' of 'Tessng.Online.VehiComposition' objects>

        @typing.overload
        def __init__(self, VehiComposition:Tessng.Online.VehiComposition) -> None: ...

        @staticmethod
        def __copy__() -> None: ...

    class VehiInfoAggregated(Shiboken.Object):
        avgSpeed: getset_descriptor # value = <attribute 'avgSpeed' of 'Tessng.Online.VehiInfoAggregated' objects>
        collectorId: getset_descriptor # value = <attribute 'collectorId' of 'Tessng.Online.VehiInfoAggregated' objects>
        fromTime: getset_descriptor # value = <attribute 'fromTime' of 'Tessng.Online.VehiInfoAggregated' objects>
        occupancy: getset_descriptor # value = <attribute 'occupancy' of 'Tessng.Online.VehiInfoAggregated' objects>
        timeId: getset_descriptor # value = <attribute 'timeId' of 'Tessng.Online.VehiInfoAggregated' objects>
        toTime: getset_descriptor # value = <attribute 'toTime' of 'Tessng.Online.VehiInfoAggregated' objects>
        vehiCount: getset_descriptor # value = <attribute 'vehiCount' of 'Tessng.Online.VehiInfoAggregated' objects>

        @typing.overload
        def __init__(self, VehiInfoAggregated:Tessng.Online.VehiInfoAggregated) -> None: ...

        @staticmethod
        def __copy__() -> None: ...

    class VehiInfoCollected(Shiboken.Object):
        acce: getset_descriptor # value = <attribute 'acce' of 'Tessng.Online.VehiInfoCollected' objects>
        avgSpeed: getset_descriptor # value = <attribute 'avgSpeed' of 'Tessng.Online.VehiInfoCollected' objects>
        collectorId: getset_descriptor # value = <attribute 'collectorId' of 'Tessng.Online.VehiInfoCollected' objects>
        desirSpeed: getset_descriptor # value = <attribute 'desirSpeed' of 'Tessng.Online.VehiInfoCollected' objects>
        distFront: getset_descriptor # value = <attribute 'distFront' of 'Tessng.Online.VehiInfoCollected' objects>
        drivInterval: getset_descriptor # value = <attribute 'drivInterval' of 'Tessng.Online.VehiInfoCollected' objects>
        intervalFront: getset_descriptor # value = <attribute 'intervalFront' of 'Tessng.Online.VehiInfoCollected' objects>
        length: getset_descriptor # value = <attribute 'length' of 'Tessng.Online.VehiInfoCollected' objects>
        simuInterval: getset_descriptor # value = <attribute 'simuInterval' of 'Tessng.Online.VehiInfoCollected' objects>
        vehiId: getset_descriptor # value = <attribute 'vehiId' of 'Tessng.Online.VehiInfoCollected' objects>
        vehiType: getset_descriptor # value = <attribute 'vehiType' of 'Tessng.Online.VehiInfoCollected' objects>

        @typing.overload
        def __init__(self, VehiInfoCollected:Tessng.Online.VehiInfoCollected) -> None: ...

        @staticmethod
        def __copy__() -> None: ...

    class VehiQueueAggregated(Shiboken.Object):
        avgQueueLength: getset_descriptor # value = <attribute 'avgQueueLength' of 'Tessng.Online.VehiQueueAggregated' objects>
        avgVehiCount: getset_descriptor # value = <attribute 'avgVehiCount' of 'Tessng.Online.VehiQueueAggregated' objects>
        counterId: getset_descriptor # value = <attribute 'counterId' of 'Tessng.Online.VehiQueueAggregated' objects>
        fromTime: getset_descriptor # value = <attribute 'fromTime' of 'Tessng.Online.VehiQueueAggregated' objects>
        maxQueueLength: getset_descriptor # value = <attribute 'maxQueueLength' of 'Tessng.Online.VehiQueueAggregated' objects>
        minQueueLength: getset_descriptor # value = <attribute 'minQueueLength' of 'Tessng.Online.VehiQueueAggregated' objects>
        timeId: getset_descriptor # value = <attribute 'timeId' of 'Tessng.Online.VehiQueueAggregated' objects>
        toTime: getset_descriptor # value = <attribute 'toTime' of 'Tessng.Online.VehiQueueAggregated' objects>

        @typing.overload
        def __init__(self, VehiQueueAggregated:Tessng.Online.VehiQueueAggregated) -> None: ...

        @staticmethod
        def __copy__() -> None: ...

    class VehiQueueCounted(Shiboken.Object):
        counterId: getset_descriptor # value = <attribute 'counterId' of 'Tessng.Online.VehiQueueCounted' objects>
        fromTime: getset_descriptor # value = <attribute 'fromTime' of 'Tessng.Online.VehiQueueCounted' objects>
        queueLength: getset_descriptor # value = <attribute 'queueLength' of 'Tessng.Online.VehiQueueCounted' objects>
        simuTime: getset_descriptor # value = <attribute 'simuTime' of 'Tessng.Online.VehiQueueCounted' objects>
        timeId: getset_descriptor # value = <attribute 'timeId' of 'Tessng.Online.VehiQueueCounted' objects>
        toTime: getset_descriptor # value = <attribute 'toTime' of 'Tessng.Online.VehiQueueCounted' objects>
        vehiCount: getset_descriptor # value = <attribute 'vehiCount' of 'Tessng.Online.VehiQueueCounted' objects>

        @typing.overload
        def __init__(self, VehiQueueCounted:Tessng.Online.VehiQueueCounted) -> None: ...

        @staticmethod
        def __copy__() -> None: ...

    class VehiTravelAggregated(Shiboken.Object):
        avgDelay: getset_descriptor # value = <attribute 'avgDelay' of 'Tessng.Online.VehiTravelAggregated' objects>
        avgTravelDistance: getset_descriptor # value = <attribute 'avgTravelDistance' of 'Tessng.Online.VehiTravelAggregated' objects>
        avgTravelTime: getset_descriptor # value = <attribute 'avgTravelTime' of 'Tessng.Online.VehiTravelAggregated' objects>
        detectedId: getset_descriptor # value = <attribute 'detectedId' of 'Tessng.Online.VehiTravelAggregated' objects>
        fromTime: getset_descriptor # value = <attribute 'fromTime' of 'Tessng.Online.VehiTravelAggregated' objects>
        timeId: getset_descriptor # value = <attribute 'timeId' of 'Tessng.Online.VehiTravelAggregated' objects>
        toTime: getset_descriptor # value = <attribute 'toTime' of 'Tessng.Online.VehiTravelAggregated' objects>
        vehiCount: getset_descriptor # value = <attribute 'vehiCount' of 'Tessng.Online.VehiTravelAggregated' objects>

        @typing.overload
        def __init__(self, VehiTravelAggregated:Tessng.Online.VehiTravelAggregated) -> None: ...

        @staticmethod
        def __copy__() -> None: ...

    class VehiTravelDetected(Shiboken.Object):
        delay: getset_descriptor # value = <attribute 'delay' of 'Tessng.Online.VehiTravelDetected' objects>
        desireSpeed: getset_descriptor # value = <attribute 'desireSpeed' of 'Tessng.Online.VehiTravelDetected' objects>
        detectedId: getset_descriptor # value = <attribute 'detectedId' of 'Tessng.Online.VehiTravelDetected' objects>
        fromTime: getset_descriptor # value = <attribute 'fromTime' of 'Tessng.Online.VehiTravelDetected' objects>
        toTime: getset_descriptor # value = <attribute 'toTime' of 'Tessng.Online.VehiTravelDetected' objects>
        travelDistance: getset_descriptor # value = <attribute 'travelDistance' of 'Tessng.Online.VehiTravelDetected' objects>
        travelTime: getset_descriptor # value = <attribute 'travelTime' of 'Tessng.Online.VehiTravelDetected' objects>
        vehiId: getset_descriptor # value = <attribute 'vehiId' of 'Tessng.Online.VehiTravelDetected' objects>

        @typing.overload
        def __init__(self, VehiTravelDetected:Tessng.Online.VehiTravelDetected) -> None: ...

        @staticmethod
        def __copy__() -> None: ...

    class VehiclePosition(Shiboken.Object):
        mEuler: getset_descriptor # value = <attribute 'mEuler' of 'Tessng.Online.VehiclePosition' objects>
        mPoint: getset_descriptor # value = <attribute 'mPoint' of 'Tessng.Online.VehiclePosition' objects>
        mrAngle: getset_descriptor # value = <attribute 'mrAngle' of 'Tessng.Online.VehiclePosition' objects>
        mrBatchNumber: getset_descriptor # value = <attribute 'mrBatchNumber' of 'Tessng.Online.VehiclePosition' objects>
        mrDatetime: getset_descriptor # value = <attribute 'mrDatetime' of 'Tessng.Online.VehiclePosition' objects>
        vehiId: getset_descriptor # value = <attribute 'vehiId' of 'Tessng.Online.VehiclePosition' objects>

        @typing.overload
        def __init__(self, VehiclePosition:Tessng.Online.VehiclePosition) -> None: ...

        @staticmethod
        def __copy__() -> None: ...

    class VehicleStatus(Shiboken.Object):
        mColor: getset_descriptor # value = <attribute 'mColor' of 'Tessng.Online.VehicleStatus' objects>
        mEuler: getset_descriptor # value = <attribute 'mEuler' of 'Tessng.Online.VehicleStatus' objects>
        mPoint: getset_descriptor # value = <attribute 'mPoint' of 'Tessng.Online.VehicleStatus' objects>
        mrAcce: getset_descriptor # value = <attribute 'mrAcce' of 'Tessng.Online.VehicleStatus' objects>
        mrAngle: getset_descriptor # value = <attribute 'mrAngle' of 'Tessng.Online.VehicleStatus' objects>
        mrBatchNumber: getset_descriptor # value = <attribute 'mrBatchNumber' of 'Tessng.Online.VehicleStatus' objects>
        mrDatetime: getset_descriptor # value = <attribute 'mrDatetime' of 'Tessng.Online.VehicleStatus' objects>
        mrDrivDistance: getset_descriptor # value = <attribute 'mrDrivDistance' of 'Tessng.Online.VehicleStatus' objects>
        mrLength: getset_descriptor # value = <attribute 'mrLength' of 'Tessng.Online.VehicleStatus' objects>
        mrRoadId: getset_descriptor # value = <attribute 'mrRoadId' of 'Tessng.Online.VehicleStatus' objects>
        mrSpeed: getset_descriptor # value = <attribute 'mrSpeed' of 'Tessng.Online.VehicleStatus' objects>
        mrWidth: getset_descriptor # value = <attribute 'mrWidth' of 'Tessng.Online.VehicleStatus' objects>
        roadType: getset_descriptor # value = <attribute 'roadType' of 'Tessng.Online.VehicleStatus' objects>
        startLinkId: getset_descriptor # value = <attribute 'startLinkId' of 'Tessng.Online.VehicleStatus' objects>
        startSimuTime: getset_descriptor # value = <attribute 'startSimuTime' of 'Tessng.Online.VehicleStatus' objects>
        vehiId: getset_descriptor # value = <attribute 'vehiId' of 'Tessng.Online.VehicleStatus' objects>
        vehiType: getset_descriptor # value = <attribute 'vehiType' of 'Tessng.Online.VehicleStatus' objects>

        @typing.overload
        def __init__(self, VehicleStatus:Tessng.Online.VehicleStatus) -> None: ...

        @staticmethod
        def __copy__() -> None: ...


class PyCustomerNet(Tessng.CustomerNet):

    def __init__(self) -> None: ...

    def afterLoadNet(self) -> None: ...
    def afterViewKeyReleaseEvent(self, event:PySide2.QtGui.QKeyEvent) -> None: ...
    def afterViewMouseDoubleClickEvent(self, event:PySide2.QtGui.QMouseEvent) -> None: ...
    def afterViewMouseMoveEvent(self, event:PySide2.QtGui.QMouseEvent) -> None: ...
    def afterViewMousePressEvent(self, event:PySide2.QtGui.QMouseEvent) -> None: ...
    def afterViewMouseReleaseEvent(self, event:PySide2.QtGui.QMouseEvent) -> None: ...
    def afterViewResizeEvent(self, event:PySide2.QtGui.QResizeEvent) -> None: ...
    def afterViewScrollContentsBy(self, dx:int, dy:int) -> None: ...
    def afterViewWheelEvent(self, event:PySide2.QtGui.QWheelEvent) -> None: ...
    def beforeLoadNet(self) -> None: ...
    def connectorAreaBrushColor(self, connAreaId:int, color:PySide2.QtGui.QColor) -> bool: ...
    def curvatureMinDist(self, itemType:int, itemId:int, minDist:float) -> bool: ...
    def curvaturePrecision(self, itemType:int, itemId:int, extend1:float, extend2:float, precision:float) -> bool: ...
    def customerTableDDL(self) -> typing.Dict: ...
    def deleteCustomerData(self) -> None: ...
    def insertCustomerData(self) -> None: ...
    def isDrawLaneCenterLine(self, laneId:int) -> bool: ...
    def isDrawLinkCenterLine(self, linkId:int) -> bool: ...
    def isDrawLinkCorner(self, linkId:int) -> bool: ...
    def isPermitForCustDraw(self) -> bool: ...
    def labelNameAndFont(self, itemType:int, itemId:int, outPropName:int, outFontSize:float) -> None: ...
    def laneBrushAndPen(self, laneId:int, brush:PySide2.QtGui.QBrush, pen:PySide2.QtGui.QPen) -> bool: ...
    def laneType(self, lType:typing.Sequence) -> bool: ...
    def linkBrushColor(self, linkId:int, color:PySide2.QtGui.QColor) -> bool: ...
    def linkBuildGLanes(self, pILink:Tessng.ILink) -> bool: ...
    def linkType(self, lType:typing.Sequence) -> bool: ...
    def netFileSuffix(self, suffix:str) -> bool: ...
    def paint(self, itemType:int, itemId:int, painter:PySide2.QtGui.QPainter) -> bool: ...
    def ref_curvatureMinDist(self, itemType:int, itemId:int, ref_minDist:Tessng.objreal) -> bool: ...
    def ref_curvaturePrecision(self, itemType:int, itemId:int, ref_extend1:Tessng.objreal, ref_extend2:Tessng.objreal, ref_precision:Tessng.objreal) -> bool: ...
    def ref_labelNameAndFont(self, itemType:int, itemId:int, ref_outPropName:Tessng.objint, ref_outFontSize:Tessng.objreal) -> None: ...
    def ref_netFileSuffix(self, ref_suffix:Tessng.objstring) -> bool: ...


class PyCustomerSimulator(Tessng.CustomerSimulator):

    def __init__(self) -> None: ...

    def afterCalcTracingType(self, pIVehicle:Tessng.IVehicle) -> None: ...
    def afterOneStep(self) -> None: ...
    def afterStart(self) -> None: ...
    def afterStep(self, pIVehicle:Tessng.IVehicle) -> None: ...
    def afterStop(self) -> None: ...
    def afterStopVehicle(self, pIVehicle:Tessng.IVehicle) -> None: ...
    def beforeCalcLampColor(self, keepOn:bool) -> bool: ...
    def beforeCreateGVehiclesForBusLine(self, pBusLine:Tessng.IBusLine, keepOn:bool) -> None: ...
    def beforeMergingToLane(self, pIVehicle:Tessng.IVehicle, keepOn:bool) -> None: ...
    def beforeNextPoint(self, pIVehicle:Tessng.IVehicle, keepOn:bool) -> None: ...
    def beforeNextRoad(self, pIVehicle:Tessng.IVehicle, pRoad:PySide2.QtWidgets.QGraphicsItem, keepOn:bool) -> None: ...
    def beforeStart(self, keepOn:bool) -> None: ...
    def beforeStopVehicle(self, pIVehicle:Tessng.IVehicle) -> None: ...
    def beforeToLeftFreely(self, pIVehicle:Tessng.IVehicle, bKeepOn:bool) -> None: ...
    def beforeToRightFreely(self, pIVehicle:Tessng.IVehicle, bKeepOn:bool) -> None: ...
    def boundingRect(self, pIVehicle:Tessng.IVehicle, outRect:PySide2.QtCore.QRectF) -> bool: ...
    def busArriving(self, pIVehicle:Tessng.IVehicle, pStationLine:Tessng.IBusStationLine, alightingCount:int, alightingTime:int, boardingCount:int, boardingTime:int) -> None: ...
    def calcAcce(self, pIVehicle:Tessng.IVehicle, acce:float) -> bool: ...
    def calcChangeLaneSafeDist(self, pIVehicle:Tessng.IVehicle, dist:float) -> bool: ...
    def calcDistToEventObj(self, pIVehicle:Tessng.IVehicle, dist:float) -> bool: ...
    def calcDynaDispatchParameters(self) -> typing.List: ...
    def calcDynaFlowRatioParameters(self) -> typing.List: ...
    def calcDynaSignalContralParameters(self) -> typing.List: ...
    def calcLampColor(self, pSignalLamp:Tessng.ISignalLamp) -> bool: ...
    def calcLimitedLaneNumber(self, pIVehicle:Tessng.IVehicle) -> typing.List: ...
    def calcMaxLimitedSpeed(self, pIVehicle:Tessng.IVehicle, inOutLimitedSpeed:float) -> bool: ...
    def calcSpeedLimitByLane(self, pILink:Tessng.ILink, laneNumber:int, outSpeed:float) -> bool: ...
    def calcVehicleEuler(self, pIVehicle:Tessng.IVehicle, bPosiDire:bool=...) -> PySide2.QtGui.QVector3D: ...
    def candidateLaneConnector(self, pIVehicle:Tessng.IVehicle, pCurrLaneConnector:Tessng.ILaneConnector) -> Tessng.ILaneConnector: ...
    def candidateLaneConnectors(self, pIVehicle:Tessng.IVehicle, lInLC:typing.Sequence) -> typing.List: ...
    def duringOneStep(self) -> None: ...
    def exportVehiTrace(self, dirPath:str) -> None: ...
    def initVehicle(self, pIVehicle:Tessng.IVehicle) -> None: ...
    def isCalcDistToReduceArea(self) -> bool: ...
    def isCalcVehicleVector3D(self) -> bool: ...
    def isExportCollecterInfo(self) -> bool: ...
    def isPassbyEventZone(self, pIVehicle:Tessng.IVehicle) -> bool: ...
    def isStopDriving(self, pIVehicle:Tessng.IVehicle) -> bool: ...
    def leaveOffChangingTrace(self, pIVehicle:Tessng.IVehicle, differ:float, s:float) -> bool: ...
    def nextPoint(self, pIVehicle:Tessng.IVehicle, bResult:bool) -> bool: ...
    def paintVehicle(self, pIVehicle:Tessng.IVehicle, painter:PySide2.QtGui.QPainter) -> bool: ...
    def paintVehicleWithRotation(self, pIVehicle:Tessng.IVehicle, painter:PySide2.QtGui.QPainter, inOutRotation:float) -> bool: ...
    def reCalcAngle(self, pIVehicle:Tessng.IVehicle, outAngle:float) -> bool: ...
    def reCalcDismissChangeLane(self, pIVehicle:Tessng.IVehicle) -> bool: ...
    def reCalcToLeftFreely(self, pIVehicle:Tessng.IVehicle) -> bool: ...
    def reCalcToLeftLane(self, pIVehicle:Tessng.IVehicle) -> bool: ...
    def reCalcToRightFreely(self, pIVehicle:Tessng.IVehicle) -> bool: ...
    def reCalcToRightLane(self, pIVehicle:Tessng.IVehicle) -> bool: ...
    def reCalcdesirSpeed(self, pIVehicle:Tessng.IVehicle, inOutDesirSpeed:float) -> bool: ...
    def rePaintVehicle(self, pIVehicle:Tessng.IVehicle, painter:PySide2.QtGui.QPainter) -> None: ...
    def reSetAcce(self, pIVehicle:Tessng.IVehicle, inOutAcce:float) -> bool: ...
    def reSetDistanceFront(self, pIVehicle:Tessng.IVehicle, distance:float, s0:float) -> bool: ...
    def reSetFollowingParam(self, pIVehicle:Tessng.IVehicle, inOutSafeInterval:float, inOutSafeDistance:float) -> bool: ...
    def reSetFollowingParams(self) -> typing.List: ...
    def reSetFollowingType(self, pIVehicle:Tessng.IVehicle, outTypeValue:int) -> bool: ...
    def reSetSimuResultDir(self, inOutResultDir:str) -> bool: ...
    def reSetSpeed(self, pIVehicle:Tessng.IVehicle, inOutSpeed:float) -> bool: ...
    def reSetVehicleFront(self, pIVehicle:Tessng.IVehicle, pVehiFront:Tessng.IVehicle) -> bool: ...
    def recentTimeOfSpeedAndPos(self, timeInterval:int) -> bool: ...
    def ref_beforeCalcLampColor(self, ref_keepOn:Tessng.objbool) -> bool: ...
    def ref_beforeCreateGVehiclesForBusLine(self, pBusLine:Tessng.IBusLine, ref_keepOn:Tessng.objbool) -> None: ...
    def ref_beforeMergingToLane(self, pIVehicle:Tessng.IVehicle, ref_keepOn:Tessng.objbool) -> None: ...
    def ref_beforeNextPoint(self, pIVehicle:Tessng.IVehicle, ref_keepOn:Tessng.objbool) -> None: ...
    def ref_beforeNextRoad(self, pIVehicle:Tessng.IVehicle, pRoad:PySide2.QtWidgets.QGraphicsItem, ref_keepOn:Tessng.objbool) -> None: ...
    def ref_beforeStart(self, ref_keepOn:Tessng.objbool) -> None: ...
    def ref_beforeToLeftFreely(self, pIVehicle:Tessng.IVehicle, ref_keepOn:Tessng.objbool) -> None: ...
    def ref_beforeToRightFreely(self, pIVehicle:Tessng.IVehicle, ref_keepOn:Tessng.objbool) -> None: ...
    def ref_calcAcce(self, pIVehicle:Tessng.IVehicle, acce:Tessng.objreal) -> bool: ...
    def ref_calcChangeLaneSafeDist(self, pIVehicle:Tessng.IVehicle, ref_dist:Tessng.objreal) -> bool: ...
    def ref_calcDistToEventObj(self, pIVehicle:Tessng.IVehicle, ref_dist:Tessng.objreal) -> bool: ...
    def ref_calcMaxLimitedSpeed(self, pIVehicle:Tessng.IVehicle, ref_inOutLimitedSpeed:Tessng.objreal) -> bool: ...
    def ref_calcSpeedLimitByLane(self, pILink:Tessng.ILink, laneNumber:int, ref_outSpeed:Tessng.objreal) -> bool: ...
    def ref_leaveOffChangingTrace(self, pIVehicle:Tessng.IVehicle, differ:float, ref_s:Tessng.objreal) -> bool: ...
    def ref_nextPoint(self, pIVehicle:Tessng.IVehicle, ref_bResult:Tessng.objbool) -> bool: ...
    def ref_paintVehicleWithRotation(self, pIVehicle:Tessng.IVehicle, painter:PySide2.QtGui.QPainter, ref_inOutRotation:Tessng.objreal) -> bool: ...
    def ref_reCalcAngle(self, pIVehicle:Tessng.IVehicle, ref_outAngle:Tessng.objreal) -> bool: ...
    def ref_reCalcdesirSpeed(self, pIVehicle:Tessng.IVehicle, ref_desirSpeed:Tessng.objreal) -> bool: ...
    def ref_reSetAcce(self, pIVehicle:Tessng.IVehicle, ref_inOutAcce:Tessng.objreal) -> bool: ...
    def ref_reSetDistanceFront(self, pIVehicle:Tessng.IVehicle, distance:Tessng.objreal, s0:Tessng.objreal) -> bool: ...
    def ref_reSetFollowingParam(self, pIVehicle:Tessng.IVehicle, ref_inOutSafeInterval:Tessng.objreal, ref_inOutSafeDistance:Tessng.objreal) -> bool: ...
    def ref_reSetFollowingType(self, pIVehicle:Tessng.IVehicle, ref_outTypeValue:Tessng.objint) -> bool: ...
    def ref_reSetSimuResultDir(self, inOutResultDir:Tessng.objstring) -> bool: ...
    def ref_reSetSpeed(self, pIVehicle:Tessng.IVehicle, ref_inOutSpeed:Tessng.objreal) -> bool: ...
    def ref_recentTimeOfSpeedAndPos(self, timeInterval:Tessng.objint) -> bool: ...
    def shape(self, pIVehicle:Tessng.IVehicle, outShape:PySide2.QtGui.QPainterPath) -> bool: ...
    def travelOnChangingTrace(self, pIVehicle:Tessng.IVehicle) -> bool: ...
    def vehiRunInfo(self, pIVehicle:Tessng.IVehicle) -> str: ...
    def writeSimuResult(self, dataDir:str) -> None: ...


class SimuInterface(Shiboken.Object):

    def __init__(self) -> None: ...

    def acceMultiples(self) -> int: ...
    def acceMultiplesReally(self) -> float: ...
    def allVehiStarted(self) -> typing.List: ...
    def allVehicle(self) -> typing.List: ...
    def batchIntervalReally(self) -> float: ...
    def batchNumber(self) -> int: ...
    def byCpuTime(self) -> bool: ...
    def catchSnapshotAsString(self) -> str: ...
    def createBus(self, pBusLine:Tessng.IBusLine, startSimuDateTime:float) -> Tessng.IVehicle: ...
    def createGVehicle(self, dynaVehi:Tessng.Online.DynaVehiParam, bStarted:bool=..., bInitLaneObject:bool=...) -> Tessng.IVehicle: ...
    def delayTimeOnBatchNumber(self, batchNumber:int) -> int: ...
    def getSignalPhasesColor(self) -> typing.List: ...
    def getVehiTrace(self, vehiId:int) -> typing.List: ...
    def getVehicle(self, vehiId:int) -> Tessng.IVehicle: ...
    def getVehisInfoAggregated(self) -> typing.List: ...
    def getVehisInfoCollected(self) -> typing.List: ...
    def getVehisQueueAggregated(self) -> typing.List: ...
    def getVehisQueueCounted(self) -> typing.List: ...
    def getVehisStatus(self) -> typing.List: ...
    def getVehisTravelAggregated(self) -> typing.List: ...
    def getVehisTravelDetected(self) -> typing.List: ...
    def isPausing(self) -> bool: ...
    def isRunning(self) -> bool: ...
    def loadSnapshotFromString(self, data:str) -> bool: ...
    def pauseSimu(self) -> None: ...
    def pauseSimuOrNot(self) -> None: ...
    def queueRecently(self, queueCounterId:int, queueLength:float, vehiCount:int) -> bool: ...
    def setAcceMultiples(self, multiples:int) -> None: ...
    def setByCpuTime(self, bByCpuTime:bool) -> bool: ...
    def setSimuAccuracy(self, accuracy:int) -> None: ...
    def setSimuIntervalScheming(self, interval:int) -> None: ...
    def setThreadCount(self, count:int) -> None: ...
    def simuAccuracy(self) -> int: ...
    def simuIntervalScheming(self) -> int: ...
    def simuTimeIntervalWithAcceMutiples(self) -> int: ...
    def startMSecsSinceEpoch(self) -> int: ...
    def startSimu(self) -> None: ...
    def stopMSecsSinceEpoch(self) -> int: ...
    def stopSimu(self) -> None: ...
    def stopVehicleDriving(self, pVehicle:Tessng.IVehicle) -> None: ...
    def timeOnBatchNumber(self, batchNumber:int) -> int: ...
    def vehiCountRunning(self) -> int: ...
    def vehiCountTotal(self) -> int: ...
    def vehicleDrivingManagerTask(self) -> Tessng.IVehicleDrivingManagerTask: ...
    def vehicleDrivingTasks(self) -> typing.List: ...
    def vehisInConnector(self, connectorId:int) -> typing.List: ...
    def vehisInLane(self, laneId:int) -> typing.List: ...
    def vehisInLaneConnector(self, connectorId:int, fromLaneId:int, toLaneId:int) -> typing.List: ...
    def vehisInLink(self, linkId:int) -> typing.List: ...


class TessInterface(PySide2.QtCore.QObject):
    staticMetaObject: PySide2.QtCore.QMetaObject

    def __init__(self) -> None: ...

    def config(self) -> typing.Dict: ...
    def guiInterface(self) -> Tessng.GuiInterface: ...
    def loadPluginFromMem(self, pPlugin:Tessng.TessPlugin) -> bool: ...
    def netInterface(self) -> Tessng.NetInterface: ...
    def releasePlugins(self) -> None: ...
    def setConfigProperty(self, key:str, value:typing.Any) -> None: ...
    def simuInterface(self) -> Tessng.SimuInterface: ...
    def workerKey(self) -> int: ...


class TessInterfaces(Shiboken.Object):

    def __init__(self) -> None: ...


class TessPlugin(Shiboken.Object):

    def __init__(self, name:str=..., description:str=..., category:str=..., version:str=..., uuid:str=..., valicode:str=...) -> None: ...

    def callMethod(self, methodName:str, params:typing.Sequence) -> None: ...
    def category(self) -> str: ...
    @typing.overload
    def certificate(self, account:str, code:int, grade:int, netFilePath:str) -> bool: ...
    def customerNet(self) -> Tessng.CustomerNet: ...
    def customerSimulator(self) -> Tessng.CustomerSimulator: ...
    def description(self) -> str: ...
    def enableActions(self) -> None: ...
    def init(self) -> None: ...
    def isChecked(self) -> bool: ...
    @staticmethod
    def isPlugin() -> bool: ...
    def library(self) -> str: ...
    def name(self) -> str: ...
    def pluginFileBaseName(self) -> str: ...
    def pluginFileName(self) -> str: ...
    def pluginFileSuffix(self) -> str: ...
    def projName(self) -> str: ...
    def setConfigProperty(self, key:str, value:PySide2.QtCore.QJsonValue) -> None: ...
    @staticmethod
    def setIsPlugin(isPlugin:bool) -> None: ...
    def setLibrary(self, lib:str) -> None: ...
    def setTessngConfig(self, obj:typing.Dict) -> None: ...
    def setTessngDir(self, dir:str) -> None: ...
    def setWorkspace(self, workspace:str) -> None: ...
    def tessngConfig(self) -> typing.Dict: ...
    def tessngDir(self) -> str: ...
    def unEnableActions(self) -> None: ...
    def unload(self) -> None: ...
    def uuid(self) -> str: ...
    def valiCode(self) -> str: ...
    def version(self) -> str: ...
    def workspace(self) -> str: ...


class TessngFactory(Shiboken.Object):

    def __init__(self) -> None: ...

    def activeSoftware(self, certDir:str) -> bool: ...
    def build(self, pPlugin:Tessng.TessPlugin, jsonConfig:typing.Dict=...) -> PySide2.QtWidgets.QMainWindow: ...


class UnitOfMeasure(object):
    Metric: Tessng.UnitOfMeasure # value = Tessng.UnitOfMeasure.Metric
    Pixel: Tessng.UnitOfMeasure # value = Tessng.UnitOfMeasure.Pixel
    name: getset_descriptor # value = <attribute 'name' of 'Tessng.UnitOfMeasure' objects>
    values: dict # value = {'Pixel': Tessng.UnitOfMeasure.Pixel, 'Metric': Tessng.UnitOfMeasure.Metric}


class _Connector(Shiboken.Object):
    color: getset_descriptor # value = <attribute 'color' of 'Tessng._Connector' objects>
    connID: getset_descriptor # value = <attribute 'connID' of 'Tessng._Connector' objects>
    connName: getset_descriptor # value = <attribute 'connName' of 'Tessng._Connector' objects>
    curvature: getset_descriptor # value = <attribute 'curvature' of 'Tessng._Connector' objects>
    desiredSpeed: getset_descriptor # value = <attribute 'desiredSpeed' of 'Tessng._Connector' objects>
    leftBreakPointsJson: getset_descriptor # value = <attribute 'leftBreakPointsJson' of 'Tessng._Connector' objects>
    length: getset_descriptor # value = <attribute 'length' of 'Tessng._Connector' objects>
    limitSpeed: getset_descriptor # value = <attribute 'limitSpeed' of 'Tessng._Connector' objects>
    nonLinearCoefficient: getset_descriptor # value = <attribute 'nonLinearCoefficient' of 'Tessng._Connector' objects>
    otherAttrsJson: getset_descriptor # value = <attribute 'otherAttrsJson' of 'Tessng._Connector' objects>
    rightBreakPointsJson: getset_descriptor # value = <attribute 'rightBreakPointsJson' of 'Tessng._Connector' objects>
    roadId: getset_descriptor # value = <attribute 'roadId' of 'Tessng._Connector' objects>

    @typing.overload
    def __init__(self, _Connector:Tessng._Connector) -> None: ...

    @staticmethod
    def __copy__() -> None: ...


class _DecisionPoint(Shiboken.Object):
    X: getset_descriptor # value = <attribute 'X' of 'Tessng._DecisionPoint' objects>
    Y: getset_descriptor # value = <attribute 'Y' of 'Tessng._DecisionPoint' objects>
    Z: getset_descriptor # value = <attribute 'Z' of 'Tessng._DecisionPoint' objects>
    deciPointID: getset_descriptor # value = <attribute 'deciPointID' of 'Tessng._DecisionPoint' objects>
    deciPointName: getset_descriptor # value = <attribute 'deciPointName' of 'Tessng._DecisionPoint' objects>

    @typing.overload
    def __init__(self, _DecisionPoint:Tessng._DecisionPoint) -> None: ...

    @staticmethod
    def __copy__() -> None: ...


class _Lane(Shiboken.Object):
    actionType: getset_descriptor # value = <attribute 'actionType' of 'Tessng._Lane' objects>
    centerLinePointsJson: getset_descriptor # value = <attribute 'centerLinePointsJson' of 'Tessng._Lane' objects>
    expectTravelDirection: getset_descriptor # value = <attribute 'expectTravelDirection' of 'Tessng._Lane' objects>
    laneID: getset_descriptor # value = <attribute 'laneID' of 'Tessng._Lane' objects>
    leftBreakPointsJson: getset_descriptor # value = <attribute 'leftBreakPointsJson' of 'Tessng._Lane' objects>
    linkID: getset_descriptor # value = <attribute 'linkID' of 'Tessng._Lane' objects>
    otherAttrsJson: getset_descriptor # value = <attribute 'otherAttrsJson' of 'Tessng._Lane' objects>
    rightBreakPointsJson: getset_descriptor # value = <attribute 'rightBreakPointsJson' of 'Tessng._Lane' objects>
    serialNumber: getset_descriptor # value = <attribute 'serialNumber' of 'Tessng._Lane' objects>
    width: getset_descriptor # value = <attribute 'width' of 'Tessng._Lane' objects>

    @typing.overload
    def __init__(self, _Lane:Tessng._Lane) -> None: ...

    @staticmethod
    def __copy__() -> None: ...


class _LaneConnector(Shiboken.Object):
    centerLinePointsJson: getset_descriptor # value = <attribute 'centerLinePointsJson' of 'Tessng._LaneConnector' objects>
    laneConnID: getset_descriptor # value = <attribute 'laneConnID' of 'Tessng._LaneConnector' objects>
    leftBreakPointsJson: getset_descriptor # value = <attribute 'leftBreakPointsJson' of 'Tessng._LaneConnector' objects>
    mrLength: getset_descriptor # value = <attribute 'mrLength' of 'Tessng._LaneConnector' objects>
    otherAttrsJson: getset_descriptor # value = <attribute 'otherAttrsJson' of 'Tessng._LaneConnector' objects>
    rightBreakPointsJson: getset_descriptor # value = <attribute 'rightBreakPointsJson' of 'Tessng._LaneConnector' objects>
    weight: getset_descriptor # value = <attribute 'weight' of 'Tessng._LaneConnector' objects>

    @typing.overload
    def __init__(self, _LaneConnector:Tessng._LaneConnector) -> None: ...

    @staticmethod
    def __copy__() -> None: ...


class _Link(Shiboken.Object):
    addValue: getset_descriptor # value = <attribute 'addValue' of 'Tessng._Link' objects>
    centerLinePointsJson: getset_descriptor # value = <attribute 'centerLinePointsJson' of 'Tessng._Link' objects>
    curvature: getset_descriptor # value = <attribute 'curvature' of 'Tessng._Link' objects>
    desiredSpeed: getset_descriptor # value = <attribute 'desiredSpeed' of 'Tessng._Link' objects>
    laneColor: getset_descriptor # value = <attribute 'laneColor' of 'Tessng._Link' objects>
    laneNumber: getset_descriptor # value = <attribute 'laneNumber' of 'Tessng._Link' objects>
    laneWidth: getset_descriptor # value = <attribute 'laneWidth' of 'Tessng._Link' objects>
    leftBreakPointsJson: getset_descriptor # value = <attribute 'leftBreakPointsJson' of 'Tessng._Link' objects>
    length: getset_descriptor # value = <attribute 'length' of 'Tessng._Link' objects>
    limitSpeed: getset_descriptor # value = <attribute 'limitSpeed' of 'Tessng._Link' objects>
    linkID: getset_descriptor # value = <attribute 'linkID' of 'Tessng._Link' objects>
    linkName: getset_descriptor # value = <attribute 'linkName' of 'Tessng._Link' objects>
    linkSaturationFlow: getset_descriptor # value = <attribute 'linkSaturationFlow' of 'Tessng._Link' objects>
    linkTrafficFlow: getset_descriptor # value = <attribute 'linkTrafficFlow' of 'Tessng._Link' objects>
    linkType: getset_descriptor # value = <attribute 'linkType' of 'Tessng._Link' objects>
    minSpeed: getset_descriptor # value = <attribute 'minSpeed' of 'Tessng._Link' objects>
    netId: getset_descriptor # value = <attribute 'netId' of 'Tessng._Link' objects>
    nonLinearCoefficient: getset_descriptor # value = <attribute 'nonLinearCoefficient' of 'Tessng._Link' objects>
    otherAttrsJson: getset_descriptor # value = <attribute 'otherAttrsJson' of 'Tessng._Link' objects>
    rightBreakPointsJson: getset_descriptor # value = <attribute 'rightBreakPointsJson' of 'Tessng._Link' objects>
    roadId: getset_descriptor # value = <attribute 'roadId' of 'Tessng._Link' objects>

    @typing.overload
    def __init__(self, _Link:Tessng._Link) -> None: ...

    @staticmethod
    def __copy__() -> None: ...


class _RoutingFLowRatio(Shiboken.Object):
    RoutingFLowRatioID: getset_descriptor # value = <attribute 'RoutingFLowRatioID' of 'Tessng._RoutingFLowRatio' objects>
    __hash__ = None
    endDateTime: getset_descriptor # value = <attribute 'endDateTime' of 'Tessng._RoutingFLowRatio' objects>
    ratio: getset_descriptor # value = <attribute 'ratio' of 'Tessng._RoutingFLowRatio' objects>
    routingID: getset_descriptor # value = <attribute 'routingID' of 'Tessng._RoutingFLowRatio' objects>
    startDateTime: getset_descriptor # value = <attribute 'startDateTime' of 'Tessng._RoutingFLowRatio' objects>

    @typing.overload
    def __init__(self, _RoutingFLowRatio:Tessng._RoutingFLowRatio) -> None: ...

    @staticmethod
    def __copy__() -> None: ...


class _VehicleType(Shiboken.Object):
    Length: getset_descriptor # value = <attribute 'Length' of 'Tessng._VehicleType' objects>
    acceSD: getset_descriptor # value = <attribute 'acceSD' of 'Tessng._VehicleType' objects>
    avgAcce: getset_descriptor # value = <attribute 'avgAcce' of 'Tessng._VehicleType' objects>
    avgDece: getset_descriptor # value = <attribute 'avgDece' of 'Tessng._VehicleType' objects>
    avgSpeed: getset_descriptor # value = <attribute 'avgSpeed' of 'Tessng._VehicleType' objects>
    deceSD: getset_descriptor # value = <attribute 'deceSD' of 'Tessng._VehicleType' objects>
    lengthSD: getset_descriptor # value = <attribute 'lengthSD' of 'Tessng._VehicleType' objects>
    maxAcce: getset_descriptor # value = <attribute 'maxAcce' of 'Tessng._VehicleType' objects>
    maxDece: getset_descriptor # value = <attribute 'maxDece' of 'Tessng._VehicleType' objects>
    maxSpeed: getset_descriptor # value = <attribute 'maxSpeed' of 'Tessng._VehicleType' objects>
    speedSD: getset_descriptor # value = <attribute 'speedSD' of 'Tessng._VehicleType' objects>
    vehicleTypeCode: getset_descriptor # value = <attribute 'vehicleTypeCode' of 'Tessng._VehicleType' objects>
    vehicleTypeName: getset_descriptor # value = <attribute 'vehicleTypeName' of 'Tessng._VehicleType' objects>
    width: getset_descriptor # value = <attribute 'width' of 'Tessng._VehicleType' objects>
    widthSD: getset_descriptor # value = <attribute 'widthSD' of 'Tessng._VehicleType' objects>

    @typing.overload
    def __init__(self, _VehicleType:Tessng._VehicleType) -> None: ...

    @staticmethod
    def __copy__() -> None: ...


class objbool(Shiboken.Object):
    value: getset_descriptor # value = <attribute 'value' of 'Tessng.objbool' objects>

    @typing.overload
    def __init__(self, v:bool) -> None: ...


class objint(Shiboken.Object):
    value: getset_descriptor # value = <attribute 'value' of 'Tessng.objint' objects>

    @typing.overload
    def __init__(self, v:int) -> None: ...


class objint64(Shiboken.Object):
    value: getset_descriptor # value = <attribute 'value' of 'Tessng.objint64' objects>

    @typing.overload
    def __init__(self, v:int) -> None: ...


class objlong(Shiboken.Object):
    value: getset_descriptor # value = <attribute 'value' of 'Tessng.objlong' objects>

    @typing.overload
    def __init__(self, v:int) -> None: ...


class objreal(Shiboken.Object):
    value: getset_descriptor # value = <attribute 'value' of 'Tessng.objreal' objects>

    @typing.overload
    def __init__(self, v:float) -> None: ...


class objstring(Shiboken.Object):
    value: getset_descriptor # value = <attribute 'value' of 'Tessng.objstring' objects>

    @typing.overload
    def __init__(self, v:str) -> None: ...

@staticmethod
def m2p(value:float) -> float: ...
@staticmethod
def p2m(value:float) -> float: ...
@staticmethod
def setUnitOfMeasure(unit:Tessng.UnitOfMeasure) -> None: ...
@staticmethod
def tessngIFace() -> Tessng.TessInterface: ...
@staticmethod
def tessngPlugin() -> Tessng.TessPlugin: ...
@staticmethod
def tngIFace() -> Tessng.TessInterface: ...
@staticmethod
def tngPlugin() -> Tessng.TessPlugin: ...

Id: Tessng.GraphicsItemPropName # value = Tessng.GraphicsItemPropName.Id
Metric: Tessng.UnitOfMeasure # value = Tessng.UnitOfMeasure.Metric
Name: Tessng.GraphicsItemPropName # value = Tessng.GraphicsItemPropName.Name
None_: Tessng.GraphicsItemPropName # value = Tessng.GraphicsItemPropName.None_
Pixel: Tessng.UnitOfMeasure # value = Tessng.UnitOfMeasure.Pixel
# eof
